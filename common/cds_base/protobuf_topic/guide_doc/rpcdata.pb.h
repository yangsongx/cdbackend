// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpcdata.proto

#ifndef PROTOBUF_rpcdata_2eproto__INCLUDED
#define PROTOBUF_rpcdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpcdata_2eproto();
void protobuf_AssignDesc_rpcdata_2eproto();
void protobuf_ShutdownFile_rpcdata_2eproto();

class CircleContent;

// ===================================================================

class CircleContent : public ::google::protobuf::Message {
 public:
  CircleContent();
  virtual ~CircleContent();

  CircleContent(const CircleContent& from);

  inline CircleContent& operator=(const CircleContent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CircleContent& default_instance();

  void Swap(CircleContent* other);

  // implements Message ----------------------------------------------

  CircleContent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CircleContent& from);
  void MergeFrom(const CircleContent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // required int32 startpoint = 2;
  inline bool has_startpoint() const;
  inline void clear_startpoint();
  static const int kStartpointFieldNumber = 2;
  inline ::google::protobuf::int32 startpoint() const;
  inline void set_startpoint(::google::protobuf::int32 value);

  // required string syn_data = 3;
  inline bool has_syn_data() const;
  inline void clear_syn_data();
  static const int kSynDataFieldNumber = 3;
  inline const ::std::string& syn_data() const;
  inline void set_syn_data(const ::std::string& value);
  inline void set_syn_data(const char* value);
  inline void set_syn_data(const char* value, size_t size);
  inline ::std::string* mutable_syn_data();
  inline ::std::string* release_syn_data();
  inline void set_allocated_syn_data(::std::string* syn_data);

  // @@protoc_insertion_point(class_scope:com.caredear.CircleContent)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_startpoint();
  inline void clear_has_startpoint();
  inline void set_has_syn_data();
  inline void clear_has_syn_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::std::string* syn_data_;
  ::google::protobuf::int32 startpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_rpcdata_2eproto();
  friend void protobuf_AssignDesc_rpcdata_2eproto();
  friend void protobuf_ShutdownFile_rpcdata_2eproto();

  void InitAsDefaultInstance();
  static CircleContent* default_instance_;
};
// ===================================================================


// ===================================================================

// CircleContent

// required string uid = 1;
inline bool CircleContent::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CircleContent::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CircleContent::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CircleContent::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& CircleContent::uid() const {
  return *uid_;
}
inline void CircleContent::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CircleContent::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void CircleContent::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CircleContent::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* CircleContent::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CircleContent::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 startpoint = 2;
inline bool CircleContent::has_startpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CircleContent::set_has_startpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CircleContent::clear_has_startpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CircleContent::clear_startpoint() {
  startpoint_ = 0;
  clear_has_startpoint();
}
inline ::google::protobuf::int32 CircleContent::startpoint() const {
  return startpoint_;
}
inline void CircleContent::set_startpoint(::google::protobuf::int32 value) {
  set_has_startpoint();
  startpoint_ = value;
}

// required string syn_data = 3;
inline bool CircleContent::has_syn_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CircleContent::set_has_syn_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CircleContent::clear_has_syn_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CircleContent::clear_syn_data() {
  if (syn_data_ != &::google::protobuf::internal::kEmptyString) {
    syn_data_->clear();
  }
  clear_has_syn_data();
}
inline const ::std::string& CircleContent::syn_data() const {
  return *syn_data_;
}
inline void CircleContent::set_syn_data(const ::std::string& value) {
  set_has_syn_data();
  if (syn_data_ == &::google::protobuf::internal::kEmptyString) {
    syn_data_ = new ::std::string;
  }
  syn_data_->assign(value);
}
inline void CircleContent::set_syn_data(const char* value) {
  set_has_syn_data();
  if (syn_data_ == &::google::protobuf::internal::kEmptyString) {
    syn_data_ = new ::std::string;
  }
  syn_data_->assign(value);
}
inline void CircleContent::set_syn_data(const char* value, size_t size) {
  set_has_syn_data();
  if (syn_data_ == &::google::protobuf::internal::kEmptyString) {
    syn_data_ = new ::std::string;
  }
  syn_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CircleContent::mutable_syn_data() {
  set_has_syn_data();
  if (syn_data_ == &::google::protobuf::internal::kEmptyString) {
    syn_data_ = new ::std::string;
  }
  return syn_data_;
}
inline ::std::string* CircleContent::release_syn_data() {
  clear_has_syn_data();
  if (syn_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = syn_data_;
    syn_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CircleContent::set_allocated_syn_data(::std::string* syn_data) {
  if (syn_data_ != &::google::protobuf::internal::kEmptyString) {
    delete syn_data_;
  }
  if (syn_data) {
    set_has_syn_data();
    syn_data_ = syn_data;
  } else {
    clear_has_syn_data();
    syn_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpcdata_2eproto__INCLUDED

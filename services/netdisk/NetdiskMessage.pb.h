// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetdiskMessage.proto

#ifndef PROTOBUF_NetdiskMessage_2eproto__INCLUDED
#define PROTOBUF_NetdiskMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NetdiskMessage_2eproto();
void protobuf_AssignDesc_NetdiskMessage_2eproto();
void protobuf_ShutdownFile_NetdiskMessage_2eproto();

class NetdiskRequest;
class NetdiskResponse;

// ===================================================================

class NetdiskRequest : public ::google::protobuf::Message {
 public:
  NetdiskRequest();
  virtual ~NetdiskRequest();

  NetdiskRequest(const NetdiskRequest& from);

  inline NetdiskRequest& operator=(const NetdiskRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetdiskRequest& default_instance();

  void Swap(NetdiskRequest* other);

  // implements Message ----------------------------------------------

  NetdiskRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetdiskRequest& from);
  void MergeFrom(const NetdiskRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string filename = 2;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 2;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:com.caredear.NetdiskRequest)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_filename();
  inline void clear_has_filename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::std::string* filename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_NetdiskMessage_2eproto();
  friend void protobuf_AssignDesc_NetdiskMessage_2eproto();
  friend void protobuf_ShutdownFile_NetdiskMessage_2eproto();

  void InitAsDefaultInstance();
  static NetdiskRequest* default_instance_;
};
// -------------------------------------------------------------------

class NetdiskResponse : public ::google::protobuf::Message {
 public:
  NetdiskResponse();
  virtual ~NetdiskResponse();

  NetdiskResponse(const NetdiskResponse& from);

  inline NetdiskResponse& operator=(const NetdiskResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetdiskResponse& default_instance();

  void Swap(NetdiskResponse* other);

  // implements Message ----------------------------------------------

  NetdiskResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetdiskResponse& from);
  void MergeFrom(const NetdiskResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 result_code() const;
  inline void set_result_code(::google::protobuf::int32 value);

  // required string uploadurl = 2;
  inline bool has_uploadurl() const;
  inline void clear_uploadurl();
  static const int kUploadurlFieldNumber = 2;
  inline const ::std::string& uploadurl() const;
  inline void set_uploadurl(const ::std::string& value);
  inline void set_uploadurl(const char* value);
  inline void set_uploadurl(const char* value, size_t size);
  inline ::std::string* mutable_uploadurl();
  inline ::std::string* release_uploadurl();
  inline void set_allocated_uploadurl(::std::string* uploadurl);

  // required string downloadurl = 3;
  inline bool has_downloadurl() const;
  inline void clear_downloadurl();
  static const int kDownloadurlFieldNumber = 3;
  inline const ::std::string& downloadurl() const;
  inline void set_downloadurl(const ::std::string& value);
  inline void set_downloadurl(const char* value);
  inline void set_downloadurl(const char* value, size_t size);
  inline ::std::string* mutable_downloadurl();
  inline ::std::string* release_downloadurl();
  inline void set_allocated_downloadurl(::std::string* downloadurl);

  // required string netdisckey = 4;
  inline bool has_netdisckey() const;
  inline void clear_netdisckey();
  static const int kNetdisckeyFieldNumber = 4;
  inline const ::std::string& netdisckey() const;
  inline void set_netdisckey(const ::std::string& value);
  inline void set_netdisckey(const char* value);
  inline void set_netdisckey(const char* value, size_t size);
  inline ::std::string* mutable_netdisckey();
  inline ::std::string* release_netdisckey();
  inline void set_allocated_netdisckey(::std::string* netdisckey);

  // @@protoc_insertion_point(class_scope:com.caredear.NetdiskResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_uploadurl();
  inline void clear_has_uploadurl();
  inline void set_has_downloadurl();
  inline void clear_has_downloadurl();
  inline void set_has_netdisckey();
  inline void clear_has_netdisckey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uploadurl_;
  ::std::string* downloadurl_;
  ::std::string* netdisckey_;
  ::google::protobuf::int32 result_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_NetdiskMessage_2eproto();
  friend void protobuf_AssignDesc_NetdiskMessage_2eproto();
  friend void protobuf_ShutdownFile_NetdiskMessage_2eproto();

  void InitAsDefaultInstance();
  static NetdiskResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// NetdiskRequest

// required string user = 1;
inline bool NetdiskRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetdiskRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetdiskRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetdiskRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& NetdiskRequest::user() const {
  return *user_;
}
inline void NetdiskRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void NetdiskRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void NetdiskRequest::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetdiskRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* NetdiskRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetdiskRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string filename = 2;
inline bool NetdiskRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetdiskRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetdiskRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetdiskRequest::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& NetdiskRequest::filename() const {
  return *filename_;
}
inline void NetdiskRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void NetdiskRequest::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void NetdiskRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetdiskRequest::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* NetdiskRequest::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetdiskRequest::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NetdiskResponse

// required int32 result_code = 1;
inline bool NetdiskResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetdiskResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetdiskResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetdiskResponse::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::google::protobuf::int32 NetdiskResponse::result_code() const {
  return result_code_;
}
inline void NetdiskResponse::set_result_code(::google::protobuf::int32 value) {
  set_has_result_code();
  result_code_ = value;
}

// required string uploadurl = 2;
inline bool NetdiskResponse::has_uploadurl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetdiskResponse::set_has_uploadurl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetdiskResponse::clear_has_uploadurl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetdiskResponse::clear_uploadurl() {
  if (uploadurl_ != &::google::protobuf::internal::kEmptyString) {
    uploadurl_->clear();
  }
  clear_has_uploadurl();
}
inline const ::std::string& NetdiskResponse::uploadurl() const {
  return *uploadurl_;
}
inline void NetdiskResponse::set_uploadurl(const ::std::string& value) {
  set_has_uploadurl();
  if (uploadurl_ == &::google::protobuf::internal::kEmptyString) {
    uploadurl_ = new ::std::string;
  }
  uploadurl_->assign(value);
}
inline void NetdiskResponse::set_uploadurl(const char* value) {
  set_has_uploadurl();
  if (uploadurl_ == &::google::protobuf::internal::kEmptyString) {
    uploadurl_ = new ::std::string;
  }
  uploadurl_->assign(value);
}
inline void NetdiskResponse::set_uploadurl(const char* value, size_t size) {
  set_has_uploadurl();
  if (uploadurl_ == &::google::protobuf::internal::kEmptyString) {
    uploadurl_ = new ::std::string;
  }
  uploadurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetdiskResponse::mutable_uploadurl() {
  set_has_uploadurl();
  if (uploadurl_ == &::google::protobuf::internal::kEmptyString) {
    uploadurl_ = new ::std::string;
  }
  return uploadurl_;
}
inline ::std::string* NetdiskResponse::release_uploadurl() {
  clear_has_uploadurl();
  if (uploadurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uploadurl_;
    uploadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetdiskResponse::set_allocated_uploadurl(::std::string* uploadurl) {
  if (uploadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete uploadurl_;
  }
  if (uploadurl) {
    set_has_uploadurl();
    uploadurl_ = uploadurl;
  } else {
    clear_has_uploadurl();
    uploadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string downloadurl = 3;
inline bool NetdiskResponse::has_downloadurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetdiskResponse::set_has_downloadurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetdiskResponse::clear_has_downloadurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetdiskResponse::clear_downloadurl() {
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    downloadurl_->clear();
  }
  clear_has_downloadurl();
}
inline const ::std::string& NetdiskResponse::downloadurl() const {
  return *downloadurl_;
}
inline void NetdiskResponse::set_downloadurl(const ::std::string& value) {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  downloadurl_->assign(value);
}
inline void NetdiskResponse::set_downloadurl(const char* value) {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  downloadurl_->assign(value);
}
inline void NetdiskResponse::set_downloadurl(const char* value, size_t size) {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  downloadurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetdiskResponse::mutable_downloadurl() {
  set_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    downloadurl_ = new ::std::string;
  }
  return downloadurl_;
}
inline ::std::string* NetdiskResponse::release_downloadurl() {
  clear_has_downloadurl();
  if (downloadurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = downloadurl_;
    downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetdiskResponse::set_allocated_downloadurl(::std::string* downloadurl) {
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadurl_;
  }
  if (downloadurl) {
    set_has_downloadurl();
    downloadurl_ = downloadurl;
  } else {
    clear_has_downloadurl();
    downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string netdisckey = 4;
inline bool NetdiskResponse::has_netdisckey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetdiskResponse::set_has_netdisckey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetdiskResponse::clear_has_netdisckey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetdiskResponse::clear_netdisckey() {
  if (netdisckey_ != &::google::protobuf::internal::kEmptyString) {
    netdisckey_->clear();
  }
  clear_has_netdisckey();
}
inline const ::std::string& NetdiskResponse::netdisckey() const {
  return *netdisckey_;
}
inline void NetdiskResponse::set_netdisckey(const ::std::string& value) {
  set_has_netdisckey();
  if (netdisckey_ == &::google::protobuf::internal::kEmptyString) {
    netdisckey_ = new ::std::string;
  }
  netdisckey_->assign(value);
}
inline void NetdiskResponse::set_netdisckey(const char* value) {
  set_has_netdisckey();
  if (netdisckey_ == &::google::protobuf::internal::kEmptyString) {
    netdisckey_ = new ::std::string;
  }
  netdisckey_->assign(value);
}
inline void NetdiskResponse::set_netdisckey(const char* value, size_t size) {
  set_has_netdisckey();
  if (netdisckey_ == &::google::protobuf::internal::kEmptyString) {
    netdisckey_ = new ::std::string;
  }
  netdisckey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetdiskResponse::mutable_netdisckey() {
  set_has_netdisckey();
  if (netdisckey_ == &::google::protobuf::internal::kEmptyString) {
    netdisckey_ = new ::std::string;
  }
  return netdisckey_;
}
inline ::std::string* NetdiskResponse::release_netdisckey() {
  clear_has_netdisckey();
  if (netdisckey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = netdisckey_;
    netdisckey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetdiskResponse::set_allocated_netdisckey(::std::string* netdisckey) {
  if (netdisckey_ != &::google::protobuf::internal::kEmptyString) {
    delete netdisckey_;
  }
  if (netdisckey) {
    set_has_netdisckey();
    netdisckey_ = netdisckey;
  } else {
    clear_has_netdisckey();
    netdisckey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NetdiskMessage_2eproto__INCLUDED

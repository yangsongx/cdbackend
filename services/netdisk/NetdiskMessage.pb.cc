// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetdiskMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetdiskMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

namespace {

const ::google::protobuf::Descriptor* NetdiskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetdiskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetdiskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetdiskResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_NetdiskMessage_2eproto() {
  protobuf_AddDesc_NetdiskMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NetdiskMessage.proto");
  GOOGLE_CHECK(file != NULL);
  NetdiskRequest_descriptor_ = file->message_type(0);
  static const int NetdiskRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, filesize_),
  };
  NetdiskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetdiskRequest_descriptor_,
      NetdiskRequest::default_instance_,
      NetdiskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetdiskRequest));
  NetdiskResponse_descriptor_ = file->message_type(1);
  static const int NetdiskResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, uploadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, downloadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, netdisckey_),
  };
  NetdiskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetdiskResponse_descriptor_,
      NetdiskResponse::default_instance_,
      NetdiskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetdiskResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NetdiskMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetdiskRequest_descriptor_, &NetdiskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetdiskResponse_descriptor_, &NetdiskResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NetdiskMessage_2eproto() {
  delete NetdiskRequest::default_instance_;
  delete NetdiskRequest_reflection_;
  delete NetdiskResponse::default_instance_;
  delete NetdiskResponse_reflection_;
}

void protobuf_AddDesc_NetdiskMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024NetdiskMessage.proto\022\014com.caredear\"B\n\016"
    "NetdiskRequest\022\014\n\004user\030\001 \002(\t\022\020\n\010filename"
    "\030\002 \002(\t\022\020\n\010filesize\030\003 \002(\005\"b\n\017NetdiskRespo"
    "nse\022\023\n\013result_code\030\001 \002(\005\022\021\n\tuploadurl\030\002 "
    "\002(\t\022\023\n\013downloadurl\030\003 \002(\t\022\022\n\nnetdisckey\030\004"
    " \002(\t", 204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NetdiskMessage.proto", &protobuf_RegisterTypes);
  NetdiskRequest::default_instance_ = new NetdiskRequest();
  NetdiskResponse::default_instance_ = new NetdiskResponse();
  NetdiskRequest::default_instance_->InitAsDefaultInstance();
  NetdiskResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NetdiskMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NetdiskMessage_2eproto {
  StaticDescriptorInitializer_NetdiskMessage_2eproto() {
    protobuf_AddDesc_NetdiskMessage_2eproto();
  }
} static_descriptor_initializer_NetdiskMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NetdiskRequest::kUserFieldNumber;
const int NetdiskRequest::kFilenameFieldNumber;
const int NetdiskRequest::kFilesizeFieldNumber;
#endif  // !_MSC_VER

NetdiskRequest::NetdiskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetdiskRequest::InitAsDefaultInstance() {
}

NetdiskRequest::NetdiskRequest(const NetdiskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetdiskRequest::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filesize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetdiskRequest::~NetdiskRequest() {
  SharedDtor();
}

void NetdiskRequest::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void NetdiskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetdiskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetdiskRequest_descriptor_;
}

const NetdiskRequest& NetdiskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetdiskMessage_2eproto();
  return *default_instance_;
}

NetdiskRequest* NetdiskRequest::default_instance_ = NULL;

NetdiskRequest* NetdiskRequest::New() const {
  return new NetdiskRequest;
}

void NetdiskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    filesize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetdiskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filename;
        break;
      }

      // required string filename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_filesize;
        break;
      }

      // required int32 filesize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetdiskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filename(), output);
  }

  // required int32 filesize = 3;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->filesize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetdiskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required string filename = 2;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // required int32 filesize = 3;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->filesize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetdiskRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string filename = 2;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // required int32 filesize = 3;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filesize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetdiskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetdiskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetdiskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetdiskRequest::MergeFrom(const NetdiskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetdiskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetdiskRequest::CopyFrom(const NetdiskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetdiskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NetdiskRequest::Swap(NetdiskRequest* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(filename_, other->filename_);
    std::swap(filesize_, other->filesize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetdiskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetdiskRequest_descriptor_;
  metadata.reflection = NetdiskRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetdiskResponse::kResultCodeFieldNumber;
const int NetdiskResponse::kUploadurlFieldNumber;
const int NetdiskResponse::kDownloadurlFieldNumber;
const int NetdiskResponse::kNetdisckeyFieldNumber;
#endif  // !_MSC_VER

NetdiskResponse::NetdiskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetdiskResponse::InitAsDefaultInstance() {
}

NetdiskResponse::NetdiskResponse(const NetdiskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetdiskResponse::SharedCtor() {
  _cached_size_ = 0;
  result_code_ = 0;
  uploadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netdisckey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetdiskResponse::~NetdiskResponse() {
  SharedDtor();
}

void NetdiskResponse::SharedDtor() {
  if (uploadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete uploadurl_;
  }
  if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
    delete downloadurl_;
  }
  if (netdisckey_ != &::google::protobuf::internal::kEmptyString) {
    delete netdisckey_;
  }
  if (this != default_instance_) {
  }
}

void NetdiskResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetdiskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetdiskResponse_descriptor_;
}

const NetdiskResponse& NetdiskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetdiskMessage_2eproto();
  return *default_instance_;
}

NetdiskResponse* NetdiskResponse::default_instance_ = NULL;

NetdiskResponse* NetdiskResponse::New() const {
  return new NetdiskResponse;
}

void NetdiskResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_code_ = 0;
    if (has_uploadurl()) {
      if (uploadurl_ != &::google::protobuf::internal::kEmptyString) {
        uploadurl_->clear();
      }
    }
    if (has_downloadurl()) {
      if (downloadurl_ != &::google::protobuf::internal::kEmptyString) {
        downloadurl_->clear();
      }
    }
    if (has_netdisckey()) {
      if (netdisckey_ != &::google::protobuf::internal::kEmptyString) {
        netdisckey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetdiskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uploadurl;
        break;
      }

      // required string uploadurl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uploadurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uploadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uploadurl().data(), this->uploadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_downloadurl;
        break;
      }

      // required string downloadurl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downloadurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downloadurl().data(), this->downloadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_netdisckey;
        break;
      }

      // required string netdisckey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netdisckey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netdisckey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->netdisckey().data(), this->netdisckey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetdiskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_code(), output);
  }

  // required string uploadurl = 2;
  if (has_uploadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uploadurl().data(), this->uploadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uploadurl(), output);
  }

  // required string downloadurl = 3;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->downloadurl(), output);
  }

  // required string netdisckey = 4;
  if (has_netdisckey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netdisckey().data(), this->netdisckey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->netdisckey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetdiskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_code(), target);
  }

  // required string uploadurl = 2;
  if (has_uploadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uploadurl().data(), this->uploadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uploadurl(), target);
  }

  // required string downloadurl = 3;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->downloadurl(), target);
  }

  // required string netdisckey = 4;
  if (has_netdisckey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netdisckey().data(), this->netdisckey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->netdisckey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetdiskResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_code());
    }

    // required string uploadurl = 2;
    if (has_uploadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uploadurl());
    }

    // required string downloadurl = 3;
    if (has_downloadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadurl());
    }

    // required string netdisckey = 4;
    if (has_netdisckey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netdisckey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetdiskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetdiskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetdiskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetdiskResponse::MergeFrom(const NetdiskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_uploadurl()) {
      set_uploadurl(from.uploadurl());
    }
    if (from.has_downloadurl()) {
      set_downloadurl(from.downloadurl());
    }
    if (from.has_netdisckey()) {
      set_netdisckey(from.netdisckey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetdiskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetdiskResponse::CopyFrom(const NetdiskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetdiskResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void NetdiskResponse::Swap(NetdiskResponse* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(uploadurl_, other->uploadurl_);
    std::swap(downloadurl_, other->downloadurl_);
    std::swap(netdisckey_, other->netdisckey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetdiskResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetdiskResponse_descriptor_;
  metadata.reflection = NetdiskResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

// @@protoc_insertion_point(global_scope)

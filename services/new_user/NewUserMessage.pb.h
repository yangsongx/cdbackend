// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NewUserMessage.proto

#ifndef PROTOBUF_NewUserMessage_2eproto__INCLUDED
#define PROTOBUF_NewUserMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NewUserMessage_2eproto();
void protobuf_AssignDesc_NewUserMessage_2eproto();
void protobuf_ShutdownFile_NewUserMessage_2eproto();

class NewUserRequest;
class NewUserResponse;

// ===================================================================

class NewUserRequest : public ::google::protobuf::Message {
 public:
  NewUserRequest();
  virtual ~NewUserRequest();

  NewUserRequest(const NewUserRequest& from);

  inline NewUserRequest& operator=(const NewUserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewUserRequest& default_instance();

  void Swap(NewUserRequest* other);

  // implements Message ----------------------------------------------

  NewUserRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewUserRequest& from);
  void MergeFrom(const NewUserRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string device = 2;
  inline bool has_device() const;
  inline void clear_device();
  static const int kDeviceFieldNumber = 2;
  inline const ::std::string& device() const;
  inline void set_device(const ::std::string& value);
  inline void set_device(const char* value);
  inline void set_device(const char* value, size_t size);
  inline ::std::string* mutable_device();
  inline ::std::string* release_device();
  inline void set_allocated_device(::std::string* device);

  // @@protoc_insertion_point(class_scope:com.caredear.NewUserRequest)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_device();
  inline void clear_has_device();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_;
  ::std::string* device_;
  friend void  protobuf_AddDesc_NewUserMessage_2eproto();
  friend void protobuf_AssignDesc_NewUserMessage_2eproto();
  friend void protobuf_ShutdownFile_NewUserMessage_2eproto();

  void InitAsDefaultInstance();
  static NewUserRequest* default_instance_;
};
// -------------------------------------------------------------------

class NewUserResponse : public ::google::protobuf::Message {
 public:
  NewUserResponse();
  virtual ~NewUserResponse();

  NewUserResponse(const NewUserResponse& from);

  inline NewUserResponse& operator=(const NewUserResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewUserResponse& default_instance();

  void Swap(NewUserResponse* other);

  // implements Message ----------------------------------------------

  NewUserResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewUserResponse& from);
  void MergeFrom(const NewUserResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 result_code() const;
  inline void set_result_code(::google::protobuf::int32 value);

  // required string user_token = 2;
  inline bool has_user_token() const;
  inline void clear_user_token();
  static const int kUserTokenFieldNumber = 2;
  inline const ::std::string& user_token() const;
  inline void set_user_token(const ::std::string& value);
  inline void set_user_token(const char* value);
  inline void set_user_token(const char* value, size_t size);
  inline ::std::string* mutable_user_token();
  inline ::std::string* release_user_token();
  inline void set_allocated_user_token(::std::string* user_token);

  // @@protoc_insertion_point(class_scope:com.caredear.NewUserResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_user_token();
  inline void clear_has_user_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* user_token_;
  ::google::protobuf::int32 result_code_;
  friend void  protobuf_AddDesc_NewUserMessage_2eproto();
  friend void protobuf_AssignDesc_NewUserMessage_2eproto();
  friend void protobuf_ShutdownFile_NewUserMessage_2eproto();

  void InitAsDefaultInstance();
  static NewUserResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// NewUserRequest

// required string user = 1;
inline bool NewUserRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewUserRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewUserRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewUserRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& NewUserRequest::user() const {
  // @@protoc_insertion_point(field_get:com.caredear.NewUserRequest.user)
  return *user_;
}
inline void NewUserRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.NewUserRequest.user)
}
inline void NewUserRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.NewUserRequest.user)
}
inline void NewUserRequest::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.NewUserRequest.user)
}
inline ::std::string* NewUserRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.NewUserRequest.user)
  return user_;
}
inline ::std::string* NewUserRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewUserRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.NewUserRequest.user)
}

// optional string device = 2;
inline bool NewUserRequest::has_device() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewUserRequest::set_has_device() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewUserRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewUserRequest::clear_device() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_->clear();
  }
  clear_has_device();
}
inline const ::std::string& NewUserRequest::device() const {
  // @@protoc_insertion_point(field_get:com.caredear.NewUserRequest.device)
  return *device_;
}
inline void NewUserRequest::set_device(const ::std::string& value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.NewUserRequest.device)
}
inline void NewUserRequest::set_device(const char* value) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.NewUserRequest.device)
}
inline void NewUserRequest::set_device(const char* value, size_t size) {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  device_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.NewUserRequest.device)
}
inline ::std::string* NewUserRequest::mutable_device() {
  set_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    device_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.NewUserRequest.device)
  return device_;
}
inline ::std::string* NewUserRequest::release_device() {
  clear_has_device();
  if (device_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = device_;
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewUserRequest::set_allocated_device(::std::string* device) {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (device) {
    set_has_device();
    device_ = device;
  } else {
    clear_has_device();
    device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.NewUserRequest.device)
}

// -------------------------------------------------------------------

// NewUserResponse

// required int32 result_code = 1;
inline bool NewUserResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewUserResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewUserResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewUserResponse::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::google::protobuf::int32 NewUserResponse::result_code() const {
  // @@protoc_insertion_point(field_get:com.caredear.NewUserResponse.result_code)
  return result_code_;
}
inline void NewUserResponse::set_result_code(::google::protobuf::int32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:com.caredear.NewUserResponse.result_code)
}

// required string user_token = 2;
inline bool NewUserResponse::has_user_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewUserResponse::set_has_user_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewUserResponse::clear_has_user_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewUserResponse::clear_user_token() {
  if (user_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_token_->clear();
  }
  clear_has_user_token();
}
inline const ::std::string& NewUserResponse::user_token() const {
  // @@protoc_insertion_point(field_get:com.caredear.NewUserResponse.user_token)
  return *user_token_;
}
inline void NewUserResponse::set_user_token(const ::std::string& value) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.NewUserResponse.user_token)
}
inline void NewUserResponse::set_user_token(const char* value) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.NewUserResponse.user_token)
}
inline void NewUserResponse::set_user_token(const char* value, size_t size) {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_token_ = new ::std::string;
  }
  user_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.NewUserResponse.user_token)
}
inline ::std::string* NewUserResponse::mutable_user_token() {
  set_has_user_token();
  if (user_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.NewUserResponse.user_token)
  return user_token_;
}
inline ::std::string* NewUserResponse::release_user_token() {
  clear_has_user_token();
  if (user_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_token_;
    user_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NewUserResponse::set_allocated_user_token(::std::string* user_token) {
  if (user_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_token_;
  }
  if (user_token) {
    set_has_user_token();
    user_token_ = user_token;
  } else {
    clear_has_user_token();
    user_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.NewUserResponse.user_token)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NewUserMessage_2eproto__INCLUDED

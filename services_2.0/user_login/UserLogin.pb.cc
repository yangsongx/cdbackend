// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserLogin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserLogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

namespace {

const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserLogin_2eproto() {
  protobuf_AddDesc_UserLogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserLogin.proto");
  GOOGLE_CHECK(file != NULL);
  LoginRequest_descriptor_ = file->message_type(0);
  static const int LoginRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, login_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, login_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, login_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, login_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, login_sysid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, logout_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, device_type_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResponse_descriptor_ = file->message_type(1);
  static const int LoginResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, extra_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, existed_in_shenzhen_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserLogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserLogin_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
}

void protobuf_AddDesc_UserLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::com::caredear::protobuf_AddDesc_CommonUserCenter_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017UserLogin.proto\022\014com.caredear\032\026CommonU"
    "serCenter.proto\"\334\001\n\014LoginRequest\022.\n\nlogi"
    "n_type\030\001 \002(\0162\032.com.caredear.RegLoginType"
    "\022\025\n\rlogin_session\030\002 \002(\t\022\022\n\nlogin_name\030\003 "
    "\002(\t\022\026\n\016login_password\030\004 \002(\t\022\023\n\013login_sys"
    "id\030\005 \002(\t\022\025\n\rlogout_ticket\030\006 \001(\t\022-\n\013devic"
    "e_type\030\007 \001(\0162\030.com.caredear.DeviceType\"c"
    "\n\rLoginResponse\022\023\n\013result_code\030\001 \002(\005\022\021\n\t"
    "extra_msg\030\002 \001(\t\022\r\n\005token\030\003 \001(\t\022\033\n\023existe"
    "d_in_shenzhen\030\004 \001(\005", 379);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserLogin.proto", &protobuf_RegisterTypes);
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserLogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserLogin_2eproto {
  StaticDescriptorInitializer_UserLogin_2eproto() {
    protobuf_AddDesc_UserLogin_2eproto();
  }
} static_descriptor_initializer_UserLogin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kLoginTypeFieldNumber;
const int LoginRequest::kLoginSessionFieldNumber;
const int LoginRequest::kLoginNameFieldNumber;
const int LoginRequest::kLoginPasswordFieldNumber;
const int LoginRequest::kLoginSysidFieldNumber;
const int LoginRequest::kLogoutTicketFieldNumber;
const int LoginRequest::kDeviceTypeFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.caredear.LoginRequest)
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.caredear.LoginRequest)
}

void LoginRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  login_type_ = 1;
  login_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  login_sysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logout_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:com.caredear.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (login_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_session_;
  }
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_name_;
  }
  if (login_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_password_;
  }
  if (login_sysid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_sysid_;
  }
  if (logout_ticket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete logout_ticket_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserLogin_2eproto();
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    login_type_ = 1;
    if (has_login_session()) {
      if (login_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_session_->clear();
      }
    }
    if (has_login_name()) {
      if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_name_->clear();
      }
    }
    if (has_login_password()) {
      if (login_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_password_->clear();
      }
    }
    if (has_login_sysid()) {
      if (login_sysid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        login_sysid_->clear();
      }
    }
    if (has_logout_ticket()) {
      if (logout_ticket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        logout_ticket_->clear();
      }
    }
    device_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.caredear.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.caredear.RegLoginType login_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::caredear::RegLoginType_IsValid(value)) {
            set_login_type(static_cast< ::com::caredear::RegLoginType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_login_session;
        break;
      }

      // required string login_session = 2;
      case 2: {
        if (tag == 18) {
         parse_login_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_session().data(), this->login_session().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login_session");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_login_name;
        break;
      }

      // required string login_name = 3;
      case 3: {
        if (tag == 26) {
         parse_login_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_name().data(), this->login_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_login_password;
        break;
      }

      // required string login_password = 4;
      case 4: {
        if (tag == 34) {
         parse_login_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_password().data(), this->login_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login_password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_login_sysid;
        break;
      }

      // required string login_sysid = 5;
      case 5: {
        if (tag == 42) {
         parse_login_sysid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_login_sysid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->login_sysid().data(), this->login_sysid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "login_sysid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_logout_ticket;
        break;
      }

      // optional string logout_ticket = 6;
      case 6: {
        if (tag == 50) {
         parse_logout_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logout_ticket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->logout_ticket().data(), this->logout_ticket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "logout_ticket");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_device_type;
        break;
      }

      // optional .com.caredear.DeviceType device_type = 7;
      case 7: {
        if (tag == 56) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::caredear::DeviceType_IsValid(value)) {
            set_device_type(static_cast< ::com::caredear::DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.caredear.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.caredear.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.caredear.LoginRequest)
  // required .com.caredear.RegLoginType login_type = 1;
  if (has_login_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->login_type(), output);
  }

  // required string login_session = 2;
  if (has_login_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_session().data(), this->login_session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->login_session(), output);
  }

  // required string login_name = 3;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_name().data(), this->login_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->login_name(), output);
  }

  // required string login_password = 4;
  if (has_login_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_password().data(), this->login_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->login_password(), output);
  }

  // required string login_sysid = 5;
  if (has_login_sysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_sysid().data(), this->login_sysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_sysid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->login_sysid(), output);
  }

  // optional string logout_ticket = 6;
  if (has_logout_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logout_ticket().data(), this->logout_ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logout_ticket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->logout_ticket(), output);
  }

  // optional .com.caredear.DeviceType device_type = 7;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->device_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.caredear.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caredear.LoginRequest)
  // required .com.caredear.RegLoginType login_type = 1;
  if (has_login_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->login_type(), target);
  }

  // required string login_session = 2;
  if (has_login_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_session().data(), this->login_session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->login_session(), target);
  }

  // required string login_name = 3;
  if (has_login_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_name().data(), this->login_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->login_name(), target);
  }

  // required string login_password = 4;
  if (has_login_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_password().data(), this->login_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->login_password(), target);
  }

  // required string login_sysid = 5;
  if (has_login_sysid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->login_sysid().data(), this->login_sysid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "login_sysid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->login_sysid(), target);
  }

  // optional string logout_ticket = 6;
  if (has_logout_ticket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->logout_ticket().data(), this->logout_ticket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "logout_ticket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->logout_ticket(), target);
  }

  // optional .com.caredear.DeviceType device_type = 7;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->device_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caredear.LoginRequest)
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.caredear.RegLoginType login_type = 1;
    if (has_login_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->login_type());
    }

    // required string login_session = 2;
    if (has_login_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_session());
    }

    // required string login_name = 3;
    if (has_login_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_name());
    }

    // required string login_password = 4;
    if (has_login_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_password());
    }

    // required string login_sysid = 5;
    if (has_login_sysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->login_sysid());
    }

    // optional string logout_ticket = 6;
    if (has_logout_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logout_ticket());
    }

    // optional .com.caredear.DeviceType device_type = 7;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_login_type()) {
      set_login_type(from.login_type());
    }
    if (from.has_login_session()) {
      set_login_session(from.login_session());
    }
    if (from.has_login_name()) {
      set_login_name(from.login_name());
    }
    if (from.has_login_password()) {
      set_login_password(from.login_password());
    }
    if (from.has_login_sysid()) {
      set_login_sysid(from.login_sysid());
    }
    if (from.has_logout_ticket()) {
      set_logout_ticket(from.logout_ticket());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(login_type_, other->login_type_);
    std::swap(login_session_, other->login_session_);
    std::swap(login_name_, other->login_name_);
    std::swap(login_password_, other->login_password_);
    std::swap(login_sysid_, other->login_sysid_);
    std::swap(logout_ticket_, other->logout_ticket_);
    std::swap(device_type_, other->device_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kResultCodeFieldNumber;
const int LoginResponse::kExtraMsgFieldNumber;
const int LoginResponse::kTokenFieldNumber;
const int LoginResponse::kExistedInShenzhenFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.caredear.LoginResponse)
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.caredear.LoginResponse)
}

void LoginResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 0;
  extra_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  existed_in_shenzhen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:com.caredear.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_msg_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserLogin_2eproto();
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LoginResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(result_code_, existed_in_shenzhen_);
    if (has_extra_msg()) {
      if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extra_msg_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.caredear.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extra_msg;
        break;
      }

      // optional string extra_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_extra_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_msg().data(), this->extra_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extra_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_existed_in_shenzhen;
        break;
      }

      // optional int32 existed_in_shenzhen = 4;
      case 4: {
        if (tag == 32) {
         parse_existed_in_shenzhen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &existed_in_shenzhen_)));
          set_has_existed_in_shenzhen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.caredear.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.caredear.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.caredear.LoginResponse)
  // required int32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_code(), output);
  }

  // optional string extra_msg = 2;
  if (has_extra_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_msg().data(), this->extra_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extra_msg(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional int32 existed_in_shenzhen = 4;
  if (has_existed_in_shenzhen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->existed_in_shenzhen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.caredear.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caredear.LoginResponse)
  // required int32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_code(), target);
  }

  // optional string extra_msg = 2;
  if (has_extra_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_msg().data(), this->extra_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extra_msg(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional int32 existed_in_shenzhen = 4;
  if (has_existed_in_shenzhen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->existed_in_shenzhen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caredear.LoginResponse)
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_code());
    }

    // optional string extra_msg = 2;
    if (has_extra_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_msg());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional int32 existed_in_shenzhen = 4;
    if (has_existed_in_shenzhen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->existed_in_shenzhen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_extra_msg()) {
      set_extra_msg(from.extra_msg());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_existed_in_shenzhen()) {
      set_existed_in_shenzhen(from.existed_in_shenzhen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(extra_msg_, other->extra_msg_);
    std::swap(token_, other->token_);
    std::swap(existed_in_shenzhen_, other->existed_in_shenzhen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

// @@protoc_insertion_point(global_scope)

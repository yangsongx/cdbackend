// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserLogin.proto

#ifndef PROTOBUF_UserLogin_2eproto__INCLUDED
#define PROTOBUF_UserLogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonUserCenter.pb.h"
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UserLogin_2eproto();
void protobuf_AssignDesc_UserLogin_2eproto();
void protobuf_ShutdownFile_UserLogin_2eproto();

class LoginRequest;
class LoginResponse;

// ===================================================================

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RegLoginType login_type = 1;
  inline bool has_login_type() const;
  inline void clear_login_type();
  static const int kLoginTypeFieldNumber = 1;
  inline ::RegLoginType login_type() const;
  inline void set_login_type(::RegLoginType value);

  // required string login_session = 2;
  inline bool has_login_session() const;
  inline void clear_login_session();
  static const int kLoginSessionFieldNumber = 2;
  inline const ::std::string& login_session() const;
  inline void set_login_session(const ::std::string& value);
  inline void set_login_session(const char* value);
  inline void set_login_session(const char* value, size_t size);
  inline ::std::string* mutable_login_session();
  inline ::std::string* release_login_session();
  inline void set_allocated_login_session(::std::string* login_session);

  // required string login_name = 3;
  inline bool has_login_name() const;
  inline void clear_login_name();
  static const int kLoginNameFieldNumber = 3;
  inline const ::std::string& login_name() const;
  inline void set_login_name(const ::std::string& value);
  inline void set_login_name(const char* value);
  inline void set_login_name(const char* value, size_t size);
  inline ::std::string* mutable_login_name();
  inline ::std::string* release_login_name();
  inline void set_allocated_login_name(::std::string* login_name);

  // required string login_password = 4;
  inline bool has_login_password() const;
  inline void clear_login_password();
  static const int kLoginPasswordFieldNumber = 4;
  inline const ::std::string& login_password() const;
  inline void set_login_password(const ::std::string& value);
  inline void set_login_password(const char* value);
  inline void set_login_password(const char* value, size_t size);
  inline ::std::string* mutable_login_password();
  inline ::std::string* release_login_password();
  inline void set_allocated_login_password(::std::string* login_password);

  // required string login_sysid = 5;
  inline bool has_login_sysid() const;
  inline void clear_login_sysid();
  static const int kLoginSysidFieldNumber = 5;
  inline const ::std::string& login_sysid() const;
  inline void set_login_sysid(const ::std::string& value);
  inline void set_login_sysid(const char* value);
  inline void set_login_sysid(const char* value, size_t size);
  inline ::std::string* mutable_login_sysid();
  inline ::std::string* release_login_sysid();
  inline void set_allocated_login_sysid(::std::string* login_sysid);

  // @@protoc_insertion_point(class_scope:com.caredear.LoginRequest)
 private:
  inline void set_has_login_type();
  inline void clear_has_login_type();
  inline void set_has_login_session();
  inline void clear_has_login_session();
  inline void set_has_login_name();
  inline void clear_has_login_name();
  inline void set_has_login_password();
  inline void clear_has_login_password();
  inline void set_has_login_sysid();
  inline void clear_has_login_sysid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* login_session_;
  ::std::string* login_name_;
  ::std::string* login_password_;
  ::std::string* login_sysid_;
  int login_type_;
  friend void  protobuf_AddDesc_UserLogin_2eproto();
  friend void protobuf_AssignDesc_UserLogin_2eproto();
  friend void protobuf_ShutdownFile_UserLogin_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 result_code() const;
  inline void set_result_code(::google::protobuf::int32 value);

  // optional string extra_msg = 2;
  inline bool has_extra_msg() const;
  inline void clear_extra_msg();
  static const int kExtraMsgFieldNumber = 2;
  inline const ::std::string& extra_msg() const;
  inline void set_extra_msg(const ::std::string& value);
  inline void set_extra_msg(const char* value);
  inline void set_extra_msg(const char* value, size_t size);
  inline ::std::string* mutable_extra_msg();
  inline ::std::string* release_extra_msg();
  inline void set_allocated_extra_msg(::std::string* extra_msg);

  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:com.caredear.LoginResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_extra_msg();
  inline void clear_has_extra_msg();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* extra_msg_;
  ::std::string* token_;
  ::google::protobuf::int32 result_code_;
  friend void  protobuf_AddDesc_UserLogin_2eproto();
  friend void protobuf_AssignDesc_UserLogin_2eproto();
  friend void protobuf_ShutdownFile_UserLogin_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRequest

// required .RegLoginType login_type = 1;
inline bool LoginRequest::has_login_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_login_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_login_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_login_type() {
  login_type_ = 1;
  clear_has_login_type();
}
inline ::RegLoginType LoginRequest::login_type() const {
  // @@protoc_insertion_point(field_get:com.caredear.LoginRequest.login_type)
  return static_cast< ::RegLoginType >(login_type_);
}
inline void LoginRequest::set_login_type(::RegLoginType value) {
  assert(::RegLoginType_IsValid(value));
  set_has_login_type();
  login_type_ = value;
  // @@protoc_insertion_point(field_set:com.caredear.LoginRequest.login_type)
}

// required string login_session = 2;
inline bool LoginRequest::has_login_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_login_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_login_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_login_session() {
  if (login_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_session_->clear();
  }
  clear_has_login_session();
}
inline const ::std::string& LoginRequest::login_session() const {
  // @@protoc_insertion_point(field_get:com.caredear.LoginRequest.login_session)
  return *login_session_;
}
inline void LoginRequest::set_login_session(const ::std::string& value) {
  set_has_login_session();
  if (login_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_session_ = new ::std::string;
  }
  login_session_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.LoginRequest.login_session)
}
inline void LoginRequest::set_login_session(const char* value) {
  set_has_login_session();
  if (login_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_session_ = new ::std::string;
  }
  login_session_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.LoginRequest.login_session)
}
inline void LoginRequest::set_login_session(const char* value, size_t size) {
  set_has_login_session();
  if (login_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_session_ = new ::std::string;
  }
  login_session_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.LoginRequest.login_session)
}
inline ::std::string* LoginRequest::mutable_login_session() {
  set_has_login_session();
  if (login_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_session_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.LoginRequest.login_session)
  return login_session_;
}
inline ::std::string* LoginRequest::release_login_session() {
  clear_has_login_session();
  if (login_session_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_session_;
    login_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_login_session(::std::string* login_session) {
  if (login_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_session_;
  }
  if (login_session) {
    set_has_login_session();
    login_session_ = login_session;
  } else {
    clear_has_login_session();
    login_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.LoginRequest.login_session)
}

// required string login_name = 3;
inline bool LoginRequest::has_login_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRequest::set_has_login_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRequest::clear_has_login_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRequest::clear_login_name() {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_->clear();
  }
  clear_has_login_name();
}
inline const ::std::string& LoginRequest::login_name() const {
  // @@protoc_insertion_point(field_get:com.caredear.LoginRequest.login_name)
  return *login_name_;
}
inline void LoginRequest::set_login_name(const ::std::string& value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.LoginRequest.login_name)
}
inline void LoginRequest::set_login_name(const char* value) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.LoginRequest.login_name)
}
inline void LoginRequest::set_login_name(const char* value, size_t size) {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  login_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.LoginRequest.login_name)
}
inline ::std::string* LoginRequest::mutable_login_name() {
  set_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.LoginRequest.login_name)
  return login_name_;
}
inline ::std::string* LoginRequest::release_login_name() {
  clear_has_login_name();
  if (login_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_name_;
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_login_name(::std::string* login_name) {
  if (login_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_name_;
  }
  if (login_name) {
    set_has_login_name();
    login_name_ = login_name;
  } else {
    clear_has_login_name();
    login_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.LoginRequest.login_name)
}

// required string login_password = 4;
inline bool LoginRequest::has_login_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginRequest::set_has_login_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginRequest::clear_has_login_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginRequest::clear_login_password() {
  if (login_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_password_->clear();
  }
  clear_has_login_password();
}
inline const ::std::string& LoginRequest::login_password() const {
  // @@protoc_insertion_point(field_get:com.caredear.LoginRequest.login_password)
  return *login_password_;
}
inline void LoginRequest::set_login_password(const ::std::string& value) {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_password_ = new ::std::string;
  }
  login_password_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.LoginRequest.login_password)
}
inline void LoginRequest::set_login_password(const char* value) {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_password_ = new ::std::string;
  }
  login_password_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.LoginRequest.login_password)
}
inline void LoginRequest::set_login_password(const char* value, size_t size) {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_password_ = new ::std::string;
  }
  login_password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.LoginRequest.login_password)
}
inline ::std::string* LoginRequest::mutable_login_password() {
  set_has_login_password();
  if (login_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.LoginRequest.login_password)
  return login_password_;
}
inline ::std::string* LoginRequest::release_login_password() {
  clear_has_login_password();
  if (login_password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_password_;
    login_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_login_password(::std::string* login_password) {
  if (login_password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_password_;
  }
  if (login_password) {
    set_has_login_password();
    login_password_ = login_password;
  } else {
    clear_has_login_password();
    login_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.LoginRequest.login_password)
}

// required string login_sysid = 5;
inline bool LoginRequest::has_login_sysid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginRequest::set_has_login_sysid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginRequest::clear_has_login_sysid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginRequest::clear_login_sysid() {
  if (login_sysid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_sysid_->clear();
  }
  clear_has_login_sysid();
}
inline const ::std::string& LoginRequest::login_sysid() const {
  // @@protoc_insertion_point(field_get:com.caredear.LoginRequest.login_sysid)
  return *login_sysid_;
}
inline void LoginRequest::set_login_sysid(const ::std::string& value) {
  set_has_login_sysid();
  if (login_sysid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_sysid_ = new ::std::string;
  }
  login_sysid_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.LoginRequest.login_sysid)
}
inline void LoginRequest::set_login_sysid(const char* value) {
  set_has_login_sysid();
  if (login_sysid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_sysid_ = new ::std::string;
  }
  login_sysid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.LoginRequest.login_sysid)
}
inline void LoginRequest::set_login_sysid(const char* value, size_t size) {
  set_has_login_sysid();
  if (login_sysid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_sysid_ = new ::std::string;
  }
  login_sysid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.LoginRequest.login_sysid)
}
inline ::std::string* LoginRequest::mutable_login_sysid() {
  set_has_login_sysid();
  if (login_sysid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    login_sysid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.LoginRequest.login_sysid)
  return login_sysid_;
}
inline ::std::string* LoginRequest::release_login_sysid() {
  clear_has_login_sysid();
  if (login_sysid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = login_sysid_;
    login_sysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginRequest::set_allocated_login_sysid(::std::string* login_sysid) {
  if (login_sysid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete login_sysid_;
  }
  if (login_sysid) {
    set_has_login_sysid();
    login_sysid_ = login_sysid;
  } else {
    clear_has_login_sysid();
    login_sysid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.LoginRequest.login_sysid)
}

// -------------------------------------------------------------------

// LoginResponse

// required int32 result_code = 1;
inline bool LoginResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::google::protobuf::int32 LoginResponse::result_code() const {
  // @@protoc_insertion_point(field_get:com.caredear.LoginResponse.result_code)
  return result_code_;
}
inline void LoginResponse::set_result_code(::google::protobuf::int32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:com.caredear.LoginResponse.result_code)
}

// optional string extra_msg = 2;
inline bool LoginResponse::has_extra_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_extra_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_extra_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_extra_msg() {
  if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_->clear();
  }
  clear_has_extra_msg();
}
inline const ::std::string& LoginResponse::extra_msg() const {
  // @@protoc_insertion_point(field_get:com.caredear.LoginResponse.extra_msg)
  return *extra_msg_;
}
inline void LoginResponse::set_extra_msg(const ::std::string& value) {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  extra_msg_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.LoginResponse.extra_msg)
}
inline void LoginResponse::set_extra_msg(const char* value) {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  extra_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.LoginResponse.extra_msg)
}
inline void LoginResponse::set_extra_msg(const char* value, size_t size) {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  extra_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.LoginResponse.extra_msg)
}
inline ::std::string* LoginResponse::mutable_extra_msg() {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.LoginResponse.extra_msg)
  return extra_msg_;
}
inline ::std::string* LoginResponse::release_extra_msg() {
  clear_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extra_msg_;
    extra_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginResponse::set_allocated_extra_msg(::std::string* extra_msg) {
  if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_msg_;
  }
  if (extra_msg) {
    set_has_extra_msg();
    extra_msg_ = extra_msg;
  } else {
    clear_has_extra_msg();
    extra_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.LoginResponse.extra_msg)
}

// optional string token = 3;
inline bool LoginResponse::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResponse::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResponse::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResponse::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& LoginResponse::token() const {
  // @@protoc_insertion_point(field_get:com.caredear.LoginResponse.token)
  return *token_;
}
inline void LoginResponse::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.LoginResponse.token)
}
inline void LoginResponse::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.LoginResponse.token)
}
inline void LoginResponse::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.LoginResponse.token)
}
inline ::std::string* LoginResponse::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.LoginResponse.token)
  return token_;
}
inline ::std::string* LoginResponse::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoginResponse::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.LoginResponse.token)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UserLogin_2eproto__INCLUDED

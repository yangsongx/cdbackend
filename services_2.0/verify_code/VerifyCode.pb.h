// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VerifyCode.proto

#ifndef PROTOBUF_VerifyCode_2eproto__INCLUDED
#define PROTOBUF_VerifyCode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VerifyCode_2eproto();
void protobuf_AssignDesc_VerifyCode_2eproto();
void protobuf_ShutdownFile_VerifyCode_2eproto();

class UpdateRequest;
class UpdateResponse;

enum Updatetype {
  MOBILE_PHONE = 0,
  EMAIL = 1,
  OTHERS = 2
};
bool Updatetype_IsValid(int value);
const Updatetype Updatetype_MIN = MOBILE_PHONE;
const Updatetype Updatetype_MAX = OTHERS;
const int Updatetype_ARRAYSIZE = Updatetype_MAX + 1;

const ::google::protobuf::EnumDescriptor* Updatetype_descriptor();
inline const ::std::string& Updatetype_Name(Updatetype value) {
  return ::google::protobuf::internal::NameOfEnum(
    Updatetype_descriptor(), value);
}
inline bool Updatetype_Parse(
    const ::std::string& name, Updatetype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Updatetype>(
    Updatetype_descriptor(), name, value);
}
// ===================================================================

class UpdateRequest : public ::google::protobuf::Message {
 public:
  UpdateRequest();
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRequest& default_instance();

  void Swap(UpdateRequest* other);

  // implements Message ----------------------------------------------

  UpdateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.caredear.Updatetype reg_type = 1;
  inline bool has_reg_type() const;
  inline void clear_reg_type();
  static const int kRegTypeFieldNumber = 1;
  inline ::com::caredear::Updatetype reg_type() const;
  inline void set_reg_type(::com::caredear::Updatetype value);

  // required string reg_ticket = 2;
  inline bool has_reg_ticket() const;
  inline void clear_reg_ticket();
  static const int kRegTicketFieldNumber = 2;
  inline const ::std::string& reg_ticket() const;
  inline void set_reg_ticket(const ::std::string& value);
  inline void set_reg_ticket(const char* value);
  inline void set_reg_ticket(const char* value, size_t size);
  inline ::std::string* mutable_reg_ticket();
  inline ::std::string* release_reg_ticket();
  inline void set_allocated_reg_ticket(::std::string* reg_ticket);

  // optional string reg_value = 3;
  inline bool has_reg_value() const;
  inline void clear_reg_value();
  static const int kRegValueFieldNumber = 3;
  inline const ::std::string& reg_value() const;
  inline void set_reg_value(const ::std::string& value);
  inline void set_reg_value(const char* value);
  inline void set_reg_value(const char* value, size_t size);
  inline ::std::string* mutable_reg_value();
  inline ::std::string* release_reg_value();
  inline void set_allocated_reg_value(::std::string* reg_value);

  // @@protoc_insertion_point(class_scope:com.caredear.UpdateRequest)
 private:
  inline void set_has_reg_type();
  inline void clear_has_reg_type();
  inline void set_has_reg_ticket();
  inline void clear_has_reg_ticket();
  inline void set_has_reg_value();
  inline void clear_has_reg_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* reg_ticket_;
  ::std::string* reg_value_;
  int reg_type_;
  friend void  protobuf_AddDesc_VerifyCode_2eproto();
  friend void protobuf_AssignDesc_VerifyCode_2eproto();
  friend void protobuf_ShutdownFile_VerifyCode_2eproto();

  void InitAsDefaultInstance();
  static UpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateResponse : public ::google::protobuf::Message {
 public:
  UpdateResponse();
  virtual ~UpdateResponse();

  UpdateResponse(const UpdateResponse& from);

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateResponse& default_instance();

  void Swap(UpdateResponse* other);

  // implements Message ----------------------------------------------

  UpdateResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateResponse& from);
  void MergeFrom(const UpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 result_code() const;
  inline void set_result_code(::google::protobuf::int32 value);

  // optional string extra_msg = 2;
  inline bool has_extra_msg() const;
  inline void clear_extra_msg();
  static const int kExtraMsgFieldNumber = 2;
  inline const ::std::string& extra_msg() const;
  inline void set_extra_msg(const ::std::string& value);
  inline void set_extra_msg(const char* value);
  inline void set_extra_msg(const char* value, size_t size);
  inline ::std::string* mutable_extra_msg();
  inline ::std::string* release_extra_msg();
  inline void set_allocated_extra_msg(::std::string* extra_msg);

  // @@protoc_insertion_point(class_scope:com.caredear.UpdateResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_extra_msg();
  inline void clear_has_extra_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* extra_msg_;
  ::google::protobuf::int32 result_code_;
  friend void  protobuf_AddDesc_VerifyCode_2eproto();
  friend void protobuf_AssignDesc_VerifyCode_2eproto();
  friend void protobuf_ShutdownFile_VerifyCode_2eproto();

  void InitAsDefaultInstance();
  static UpdateResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// UpdateRequest

// required .com.caredear.Updatetype reg_type = 1;
inline bool UpdateRequest::has_reg_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateRequest::set_has_reg_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateRequest::clear_has_reg_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateRequest::clear_reg_type() {
  reg_type_ = 0;
  clear_has_reg_type();
}
inline ::com::caredear::Updatetype UpdateRequest::reg_type() const {
  // @@protoc_insertion_point(field_get:com.caredear.UpdateRequest.reg_type)
  return static_cast< ::com::caredear::Updatetype >(reg_type_);
}
inline void UpdateRequest::set_reg_type(::com::caredear::Updatetype value) {
  assert(::com::caredear::Updatetype_IsValid(value));
  set_has_reg_type();
  reg_type_ = value;
  // @@protoc_insertion_point(field_set:com.caredear.UpdateRequest.reg_type)
}

// required string reg_ticket = 2;
inline bool UpdateRequest::has_reg_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateRequest::set_has_reg_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateRequest::clear_has_reg_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateRequest::clear_reg_ticket() {
  if (reg_ticket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reg_ticket_->clear();
  }
  clear_has_reg_ticket();
}
inline const ::std::string& UpdateRequest::reg_ticket() const {
  // @@protoc_insertion_point(field_get:com.caredear.UpdateRequest.reg_ticket)
  return *reg_ticket_;
}
inline void UpdateRequest::set_reg_ticket(const ::std::string& value) {
  set_has_reg_ticket();
  if (reg_ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reg_ticket_ = new ::std::string;
  }
  reg_ticket_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.UpdateRequest.reg_ticket)
}
inline void UpdateRequest::set_reg_ticket(const char* value) {
  set_has_reg_ticket();
  if (reg_ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reg_ticket_ = new ::std::string;
  }
  reg_ticket_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.UpdateRequest.reg_ticket)
}
inline void UpdateRequest::set_reg_ticket(const char* value, size_t size) {
  set_has_reg_ticket();
  if (reg_ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reg_ticket_ = new ::std::string;
  }
  reg_ticket_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.UpdateRequest.reg_ticket)
}
inline ::std::string* UpdateRequest::mutable_reg_ticket() {
  set_has_reg_ticket();
  if (reg_ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reg_ticket_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.UpdateRequest.reg_ticket)
  return reg_ticket_;
}
inline ::std::string* UpdateRequest::release_reg_ticket() {
  clear_has_reg_ticket();
  if (reg_ticket_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reg_ticket_;
    reg_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpdateRequest::set_allocated_reg_ticket(::std::string* reg_ticket) {
  if (reg_ticket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reg_ticket_;
  }
  if (reg_ticket) {
    set_has_reg_ticket();
    reg_ticket_ = reg_ticket;
  } else {
    clear_has_reg_ticket();
    reg_ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.UpdateRequest.reg_ticket)
}

// optional string reg_value = 3;
inline bool UpdateRequest::has_reg_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateRequest::set_has_reg_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateRequest::clear_has_reg_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateRequest::clear_reg_value() {
  if (reg_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reg_value_->clear();
  }
  clear_has_reg_value();
}
inline const ::std::string& UpdateRequest::reg_value() const {
  // @@protoc_insertion_point(field_get:com.caredear.UpdateRequest.reg_value)
  return *reg_value_;
}
inline void UpdateRequest::set_reg_value(const ::std::string& value) {
  set_has_reg_value();
  if (reg_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reg_value_ = new ::std::string;
  }
  reg_value_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.UpdateRequest.reg_value)
}
inline void UpdateRequest::set_reg_value(const char* value) {
  set_has_reg_value();
  if (reg_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reg_value_ = new ::std::string;
  }
  reg_value_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.UpdateRequest.reg_value)
}
inline void UpdateRequest::set_reg_value(const char* value, size_t size) {
  set_has_reg_value();
  if (reg_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reg_value_ = new ::std::string;
  }
  reg_value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.UpdateRequest.reg_value)
}
inline ::std::string* UpdateRequest::mutable_reg_value() {
  set_has_reg_value();
  if (reg_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reg_value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.UpdateRequest.reg_value)
  return reg_value_;
}
inline ::std::string* UpdateRequest::release_reg_value() {
  clear_has_reg_value();
  if (reg_value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reg_value_;
    reg_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpdateRequest::set_allocated_reg_value(::std::string* reg_value) {
  if (reg_value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reg_value_;
  }
  if (reg_value) {
    set_has_reg_value();
    reg_value_ = reg_value;
  } else {
    clear_has_reg_value();
    reg_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.UpdateRequest.reg_value)
}

// -------------------------------------------------------------------

// UpdateResponse

// required int32 result_code = 1;
inline bool UpdateResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateResponse::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::google::protobuf::int32 UpdateResponse::result_code() const {
  // @@protoc_insertion_point(field_get:com.caredear.UpdateResponse.result_code)
  return result_code_;
}
inline void UpdateResponse::set_result_code(::google::protobuf::int32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:com.caredear.UpdateResponse.result_code)
}

// optional string extra_msg = 2;
inline bool UpdateResponse::has_extra_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateResponse::set_has_extra_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateResponse::clear_has_extra_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateResponse::clear_extra_msg() {
  if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_->clear();
  }
  clear_has_extra_msg();
}
inline const ::std::string& UpdateResponse::extra_msg() const {
  // @@protoc_insertion_point(field_get:com.caredear.UpdateResponse.extra_msg)
  return *extra_msg_;
}
inline void UpdateResponse::set_extra_msg(const ::std::string& value) {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  extra_msg_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.UpdateResponse.extra_msg)
}
inline void UpdateResponse::set_extra_msg(const char* value) {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  extra_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.UpdateResponse.extra_msg)
}
inline void UpdateResponse::set_extra_msg(const char* value, size_t size) {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  extra_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.UpdateResponse.extra_msg)
}
inline ::std::string* UpdateResponse::mutable_extra_msg() {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.UpdateResponse.extra_msg)
  return extra_msg_;
}
inline ::std::string* UpdateResponse::release_extra_msg() {
  clear_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extra_msg_;
    extra_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UpdateResponse::set_allocated_extra_msg(::std::string* extra_msg) {
  if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_msg_;
  }
  if (extra_msg) {
    set_has_extra_msg();
    extra_msg_ = extra_msg;
  } else {
    clear_has_extra_msg();
    extra_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.UpdateResponse.extra_msg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::caredear::Updatetype> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::caredear::Updatetype>() {
  return ::com::caredear::Updatetype_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VerifyCode_2eproto__INCLUDED

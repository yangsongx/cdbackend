// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetdiskMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetdiskMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

namespace {

const ::google::protobuf::Descriptor* NetdiskRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetdiskRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetdiskResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetdiskResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Opcode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_NetdiskMessage_2eproto() {
  protobuf_AddDesc_NetdiskMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "NetdiskMessage.proto");
  GOOGLE_CHECK(file != NULL);
  NetdiskRequest_descriptor_ = file->message_type(0);
  static const int NetdiskRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, caredear_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, filesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, newfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, filecollection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, filepermission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, fileuploader_),
  };
  NetdiskRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetdiskRequest_descriptor_,
      NetdiskRequest::default_instance_,
      NetdiskRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetdiskRequest));
  NetdiskResponse_descriptor_ = file->message_type(1);
  static const int NetdiskResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, opcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, errormsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, uploadtoken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, downloadurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, netdisckey_),
  };
  NetdiskResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetdiskResponse_descriptor_,
      NetdiskResponse::default_instance_,
      NetdiskResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetdiskResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetdiskResponse));
  Opcode_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_NetdiskMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetdiskRequest_descriptor_, &NetdiskRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetdiskResponse_descriptor_, &NetdiskResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_NetdiskMessage_2eproto() {
  delete NetdiskRequest::default_instance_;
  delete NetdiskRequest_reflection_;
  delete NetdiskResponse::default_instance_;
  delete NetdiskResponse_reflection_;
}

void protobuf_AddDesc_NetdiskMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024NetdiskMessage.proto\022\014com.caredear\"\341\001\n"
    "\016NetdiskRequest\022\014\n\004user\030\001 \002(\t\022\023\n\013caredea"
    "r_id\030\002 \002(\004\022$\n\006opcode\030\003 \002(\0162\024.com.caredea"
    "r.Opcode\022\013\n\003md5\030\004 \001(\t\022\020\n\010filename\030\005 \001(\t\022"
    "\020\n\010filesize\030\006 \001(\005\022\017\n\007newfile\030\007 \001(\t\022\026\n\016fi"
    "lecollection\030\010 \001(\t\022\026\n\016filepermission\030\t \001"
    "(\t\022\024\n\014fileuploader\030\n \001(\t\"\234\001\n\017NetdiskResp"
    "onse\022$\n\006opcode\030\001 \002(\0162\024.com.caredear.Opco"
    "de\022\023\n\013result_code\030\002 \002(\005\022\020\n\010errormsg\030\003 \001("
    "\t\022\023\n\013uploadtoken\030\004 \001(\t\022\023\n\013downloadurl\030\005 "
    "\001(\t\022\022\n\nnetdisckey\030\006 \001(\t*g\n\006Opcode\022\r\n\tUPL"
    "OADING\020\000\022\014\n\010UPLOADED\020\001\022\n\n\006DELETE\020\002\022\n\n\006RE"
    "NAME\020\003\022\t\n\005SHARE\020\004\022\014\n\010LISTFILE\020\005\022\017\n\013DOWNL"
    "OADURL\020\006", 528);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NetdiskMessage.proto", &protobuf_RegisterTypes);
  NetdiskRequest::default_instance_ = new NetdiskRequest();
  NetdiskResponse::default_instance_ = new NetdiskResponse();
  NetdiskRequest::default_instance_->InitAsDefaultInstance();
  NetdiskResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NetdiskMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NetdiskMessage_2eproto {
  StaticDescriptorInitializer_NetdiskMessage_2eproto() {
    protobuf_AddDesc_NetdiskMessage_2eproto();
  }
} static_descriptor_initializer_NetdiskMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* Opcode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Opcode_descriptor_;
}
bool Opcode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NetdiskRequest::kUserFieldNumber;
const int NetdiskRequest::kCaredearIdFieldNumber;
const int NetdiskRequest::kOpcodeFieldNumber;
const int NetdiskRequest::kMd5FieldNumber;
const int NetdiskRequest::kFilenameFieldNumber;
const int NetdiskRequest::kFilesizeFieldNumber;
const int NetdiskRequest::kNewfileFieldNumber;
const int NetdiskRequest::kFilecollectionFieldNumber;
const int NetdiskRequest::kFilepermissionFieldNumber;
const int NetdiskRequest::kFileuploaderFieldNumber;
#endif  // !_MSC_VER

NetdiskRequest::NetdiskRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.caredear.NetdiskRequest)
}

void NetdiskRequest::InitAsDefaultInstance() {
}

NetdiskRequest::NetdiskRequest(const NetdiskRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.caredear.NetdiskRequest)
}

void NetdiskRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caredear_id_ = GOOGLE_ULONGLONG(0);
  opcode_ = 0;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesize_ = 0;
  newfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filecollection_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filepermission_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fileuploader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetdiskRequest::~NetdiskRequest() {
  // @@protoc_insertion_point(destructor:com.caredear.NetdiskRequest)
  SharedDtor();
}

void NetdiskRequest::SharedDtor() {
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (newfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newfile_;
  }
  if (filecollection_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filecollection_;
  }
  if (filepermission_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filepermission_;
  }
  if (fileuploader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fileuploader_;
  }
  if (this != default_instance_) {
  }
}

void NetdiskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetdiskRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetdiskRequest_descriptor_;
}

const NetdiskRequest& NetdiskRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetdiskMessage_2eproto();
  return *default_instance_;
}

NetdiskRequest* NetdiskRequest::default_instance_ = NULL;

NetdiskRequest* NetdiskRequest::New() const {
  return new NetdiskRequest;
}

void NetdiskRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetdiskRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(opcode_, filesize_);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
    caredear_id_ = GOOGLE_ULONGLONG(0);
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        md5_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
    if (has_newfile()) {
      if (newfile_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newfile_->clear();
      }
    }
    if (has_filecollection()) {
      if (filecollection_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filecollection_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_filepermission()) {
      if (filepermission_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filepermission_->clear();
      }
    }
    if (has_fileuploader()) {
      if (fileuploader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fileuploader_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetdiskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.caredear.NetdiskRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_caredear_id;
        break;
      }

      // required uint64 caredear_id = 2;
      case 2: {
        if (tag == 16) {
         parse_caredear_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caredear_id_)));
          set_has_caredear_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opcode;
        break;
      }

      // required .com.caredear.Opcode opcode = 3;
      case 3: {
        if (tag == 24) {
         parse_opcode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::caredear::Opcode_IsValid(value)) {
            set_opcode(static_cast< ::com::caredear::Opcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_md5;
        break;
      }

      // optional string md5 = 4;
      case 4: {
        if (tag == 34) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_filename;
        break;
      }

      // optional string filename = 5;
      case 5: {
        if (tag == 42) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_filesize;
        break;
      }

      // optional int32 filesize = 6;
      case 6: {
        if (tag == 48) {
         parse_filesize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filesize_)));
          set_has_filesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_newfile;
        break;
      }

      // optional string newfile = 7;
      case 7: {
        if (tag == 58) {
         parse_newfile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newfile().data(), this->newfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newfile");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_filecollection;
        break;
      }

      // optional string filecollection = 8;
      case 8: {
        if (tag == 66) {
         parse_filecollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filecollection()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filecollection().data(), this->filecollection().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filecollection");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_filepermission;
        break;
      }

      // optional string filepermission = 9;
      case 9: {
        if (tag == 74) {
         parse_filepermission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepermission()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filepermission().data(), this->filepermission().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filepermission");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_fileuploader;
        break;
      }

      // optional string fileuploader = 10;
      case 10: {
        if (tag == 82) {
         parse_fileuploader:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileuploader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileuploader().data(), this->fileuploader().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fileuploader");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.caredear.NetdiskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.caredear.NetdiskRequest)
  return false;
#undef DO_
}

void NetdiskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.caredear.NetdiskRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  // required uint64 caredear_id = 2;
  if (has_caredear_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->caredear_id(), output);
  }

  // required .com.caredear.Opcode opcode = 3;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opcode(), output);
  }

  // optional string md5 = 4;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->md5(), output);
  }

  // optional string filename = 5;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filename(), output);
  }

  // optional int32 filesize = 6;
  if (has_filesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->filesize(), output);
  }

  // optional string newfile = 7;
  if (has_newfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newfile().data(), this->newfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newfile");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->newfile(), output);
  }

  // optional string filecollection = 8;
  if (has_filecollection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filecollection().data(), this->filecollection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filecollection");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->filecollection(), output);
  }

  // optional string filepermission = 9;
  if (has_filepermission()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepermission().data(), this->filepermission().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepermission");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->filepermission(), output);
  }

  // optional string fileuploader = 10;
  if (has_fileuploader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileuploader().data(), this->fileuploader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileuploader");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->fileuploader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.caredear.NetdiskRequest)
}

::google::protobuf::uint8* NetdiskRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caredear.NetdiskRequest)
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required uint64 caredear_id = 2;
  if (has_caredear_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->caredear_id(), target);
  }

  // required .com.caredear.Opcode opcode = 3;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opcode(), target);
  }

  // optional string md5 = 4;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->md5(), target);
  }

  // optional string filename = 5;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filename(), target);
  }

  // optional int32 filesize = 6;
  if (has_filesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->filesize(), target);
  }

  // optional string newfile = 7;
  if (has_newfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newfile().data(), this->newfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newfile");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->newfile(), target);
  }

  // optional string filecollection = 8;
  if (has_filecollection()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filecollection().data(), this->filecollection().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filecollection");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->filecollection(), target);
  }

  // optional string filepermission = 9;
  if (has_filepermission()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filepermission().data(), this->filepermission().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filepermission");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->filepermission(), target);
  }

  // optional string fileuploader = 10;
  if (has_fileuploader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileuploader().data(), this->fileuploader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileuploader");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fileuploader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caredear.NetdiskRequest)
  return target;
}

int NetdiskRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required uint64 caredear_id = 2;
    if (has_caredear_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->caredear_id());
    }

    // required .com.caredear.Opcode opcode = 3;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opcode());
    }

    // optional string md5 = 4;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

    // optional string filename = 5;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional int32 filesize = 6;
    if (has_filesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filesize());
    }

    // optional string newfile = 7;
    if (has_newfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newfile());
    }

    // optional string filecollection = 8;
    if (has_filecollection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filecollection());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string filepermission = 9;
    if (has_filepermission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepermission());
    }

    // optional string fileuploader = 10;
    if (has_fileuploader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileuploader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetdiskRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetdiskRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetdiskRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetdiskRequest::MergeFrom(const NetdiskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_caredear_id()) {
      set_caredear_id(from.caredear_id());
    }
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filesize()) {
      set_filesize(from.filesize());
    }
    if (from.has_newfile()) {
      set_newfile(from.newfile());
    }
    if (from.has_filecollection()) {
      set_filecollection(from.filecollection());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filepermission()) {
      set_filepermission(from.filepermission());
    }
    if (from.has_fileuploader()) {
      set_fileuploader(from.fileuploader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetdiskRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetdiskRequest::CopyFrom(const NetdiskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetdiskRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NetdiskRequest::Swap(NetdiskRequest* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(caredear_id_, other->caredear_id_);
    std::swap(opcode_, other->opcode_);
    std::swap(md5_, other->md5_);
    std::swap(filename_, other->filename_);
    std::swap(filesize_, other->filesize_);
    std::swap(newfile_, other->newfile_);
    std::swap(filecollection_, other->filecollection_);
    std::swap(filepermission_, other->filepermission_);
    std::swap(fileuploader_, other->fileuploader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetdiskRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetdiskRequest_descriptor_;
  metadata.reflection = NetdiskRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetdiskResponse::kOpcodeFieldNumber;
const int NetdiskResponse::kResultCodeFieldNumber;
const int NetdiskResponse::kErrormsgFieldNumber;
const int NetdiskResponse::kUploadtokenFieldNumber;
const int NetdiskResponse::kDownloadurlFieldNumber;
const int NetdiskResponse::kNetdisckeyFieldNumber;
#endif  // !_MSC_VER

NetdiskResponse::NetdiskResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.caredear.NetdiskResponse)
}

void NetdiskResponse::InitAsDefaultInstance() {
}

NetdiskResponse::NetdiskResponse(const NetdiskResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.caredear.NetdiskResponse)
}

void NetdiskResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  opcode_ = 0;
  result_code_ = 0;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uploadtoken_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  downloadurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  netdisckey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetdiskResponse::~NetdiskResponse() {
  // @@protoc_insertion_point(destructor:com.caredear.NetdiskResponse)
  SharedDtor();
}

void NetdiskResponse::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errormsg_;
  }
  if (uploadtoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uploadtoken_;
  }
  if (downloadurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete downloadurl_;
  }
  if (netdisckey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete netdisckey_;
  }
  if (this != default_instance_) {
  }
}

void NetdiskResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetdiskResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetdiskResponse_descriptor_;
}

const NetdiskResponse& NetdiskResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_NetdiskMessage_2eproto();
  return *default_instance_;
}

NetdiskResponse* NetdiskResponse::default_instance_ = NULL;

NetdiskResponse* NetdiskResponse::New() const {
  return new NetdiskResponse;
}

void NetdiskResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NetdiskResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(opcode_, result_code_);
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errormsg_->clear();
      }
    }
    if (has_uploadtoken()) {
      if (uploadtoken_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uploadtoken_->clear();
      }
    }
    if (has_downloadurl()) {
      if (downloadurl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        downloadurl_->clear();
      }
    }
    if (has_netdisckey()) {
      if (netdisckey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        netdisckey_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetdiskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.caredear.NetdiskResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.caredear.Opcode opcode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::caredear::Opcode_IsValid(value)) {
            set_opcode(static_cast< ::com::caredear::Opcode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result_code;
        break;
      }

      // required int32 result_code = 2;
      case 2: {
        if (tag == 16) {
         parse_result_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_errormsg;
        break;
      }

      // optional string errormsg = 3;
      case 3: {
        if (tag == 26) {
         parse_errormsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errormsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uploadtoken;
        break;
      }

      // optional string uploadtoken = 4;
      case 4: {
        if (tag == 34) {
         parse_uploadtoken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uploadtoken()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uploadtoken().data(), this->uploadtoken().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uploadtoken");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_downloadurl;
        break;
      }

      // optional string downloadurl = 5;
      case 5: {
        if (tag == 42) {
         parse_downloadurl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downloadurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->downloadurl().data(), this->downloadurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "downloadurl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_netdisckey;
        break;
      }

      // optional string netdisckey = 6;
      case 6: {
        if (tag == 50) {
         parse_netdisckey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netdisckey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->netdisckey().data(), this->netdisckey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "netdisckey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.caredear.NetdiskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.caredear.NetdiskResponse)
  return false;
#undef DO_
}

void NetdiskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.caredear.NetdiskResponse)
  // required .com.caredear.Opcode opcode = 1;
  if (has_opcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->opcode(), output);
  }

  // required int32 result_code = 2;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result_code(), output);
  }

  // optional string errormsg = 3;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errormsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errormsg(), output);
  }

  // optional string uploadtoken = 4;
  if (has_uploadtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uploadtoken().data(), this->uploadtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uploadtoken");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uploadtoken(), output);
  }

  // optional string downloadurl = 5;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "downloadurl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->downloadurl(), output);
  }

  // optional string netdisckey = 6;
  if (has_netdisckey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netdisckey().data(), this->netdisckey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netdisckey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->netdisckey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.caredear.NetdiskResponse)
}

::google::protobuf::uint8* NetdiskResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caredear.NetdiskResponse)
  // required .com.caredear.Opcode opcode = 1;
  if (has_opcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->opcode(), target);
  }

  // required int32 result_code = 2;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result_code(), target);
  }

  // optional string errormsg = 3;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errormsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errormsg(), target);
  }

  // optional string uploadtoken = 4;
  if (has_uploadtoken()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uploadtoken().data(), this->uploadtoken().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uploadtoken");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uploadtoken(), target);
  }

  // optional string downloadurl = 5;
  if (has_downloadurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->downloadurl().data(), this->downloadurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "downloadurl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->downloadurl(), target);
  }

  // optional string netdisckey = 6;
  if (has_netdisckey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->netdisckey().data(), this->netdisckey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "netdisckey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->netdisckey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caredear.NetdiskResponse)
  return target;
}

int NetdiskResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.caredear.Opcode opcode = 1;
    if (has_opcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opcode());
    }

    // required int32 result_code = 2;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_code());
    }

    // optional string errormsg = 3;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

    // optional string uploadtoken = 4;
    if (has_uploadtoken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uploadtoken());
    }

    // optional string downloadurl = 5;
    if (has_downloadurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downloadurl());
    }

    // optional string netdisckey = 6;
    if (has_netdisckey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netdisckey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetdiskResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetdiskResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetdiskResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetdiskResponse::MergeFrom(const NetdiskResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opcode()) {
      set_opcode(from.opcode());
    }
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
    if (from.has_uploadtoken()) {
      set_uploadtoken(from.uploadtoken());
    }
    if (from.has_downloadurl()) {
      set_downloadurl(from.downloadurl());
    }
    if (from.has_netdisckey()) {
      set_netdisckey(from.netdisckey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetdiskResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetdiskResponse::CopyFrom(const NetdiskResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetdiskResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NetdiskResponse::Swap(NetdiskResponse* other) {
  if (other != this) {
    std::swap(opcode_, other->opcode_);
    std::swap(result_code_, other->result_code_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(uploadtoken_, other->uploadtoken_);
    std::swap(downloadurl_, other->downloadurl_);
    std::swap(netdisckey_, other->netdisckey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetdiskResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetdiskResponse_descriptor_;
  metadata.reflection = NetdiskResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

// @@protoc_insertion_point(global_scope)

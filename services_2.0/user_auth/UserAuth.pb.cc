// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserAuth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserAuth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

namespace {

const ::google::protobuf::Descriptor* AuthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserAuth_2eproto() {
  protobuf_AddDesc_UserAuth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserAuth.proto");
  GOOGLE_CHECK(file != NULL);
  AuthRequest_descriptor_ = file->message_type(0);
  static const int AuthRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, auth_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, auth_session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, auth_sysid_),
  };
  AuthRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthRequest_descriptor_,
      AuthRequest::default_instance_,
      AuthRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthRequest));
  AuthResponse_descriptor_ = file->message_type(1);
  static const int AuthResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, extra_msg_),
  };
  AuthResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthResponse_descriptor_,
      AuthResponse::default_instance_,
      AuthResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserAuth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthRequest_descriptor_, &AuthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthResponse_descriptor_, &AuthResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserAuth_2eproto() {
  delete AuthRequest::default_instance_;
  delete AuthRequest_reflection_;
  delete AuthResponse::default_instance_;
  delete AuthResponse_reflection_;
}

void protobuf_AddDesc_UserAuth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016UserAuth.proto\022\014com.caredear\"K\n\013AuthRe"
    "quest\022\022\n\nauth_token\030\001 \002(\t\022\024\n\014auth_sessio"
    "n\030\002 \002(\t\022\022\n\nauth_sysid\030\003 \002(\005\"6\n\014AuthRespo"
    "nse\022\023\n\013result_code\030\001 \002(\005\022\021\n\textra_msg\030\002 "
    "\001(\t", 163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserAuth.proto", &protobuf_RegisterTypes);
  AuthRequest::default_instance_ = new AuthRequest();
  AuthResponse::default_instance_ = new AuthResponse();
  AuthRequest::default_instance_->InitAsDefaultInstance();
  AuthResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserAuth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserAuth_2eproto {
  StaticDescriptorInitializer_UserAuth_2eproto() {
    protobuf_AddDesc_UserAuth_2eproto();
  }
} static_descriptor_initializer_UserAuth_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AuthRequest::kAuthTokenFieldNumber;
const int AuthRequest::kAuthSessionFieldNumber;
const int AuthRequest::kAuthSysidFieldNumber;
#endif  // !_MSC_VER

AuthRequest::AuthRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.caredear.AuthRequest)
}

void AuthRequest::InitAsDefaultInstance() {
}

AuthRequest::AuthRequest(const AuthRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.caredear.AuthRequest)
}

void AuthRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  auth_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  auth_sysid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthRequest::~AuthRequest() {
  // @@protoc_insertion_point(destructor:com.caredear.AuthRequest)
  SharedDtor();
}

void AuthRequest::SharedDtor() {
  if (auth_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_token_;
  }
  if (auth_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete auth_session_;
  }
  if (this != default_instance_) {
  }
}

void AuthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthRequest_descriptor_;
}

const AuthRequest& AuthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserAuth_2eproto();
  return *default_instance_;
}

AuthRequest* AuthRequest::default_instance_ = NULL;

AuthRequest* AuthRequest::New() const {
  return new AuthRequest;
}

void AuthRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_auth_token()) {
      if (auth_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        auth_token_->clear();
      }
    }
    if (has_auth_session()) {
      if (auth_session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        auth_session_->clear();
      }
    }
    auth_sysid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.caredear.AuthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string auth_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_token().data(), this->auth_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "auth_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_auth_session;
        break;
      }

      // required string auth_session = 2;
      case 2: {
        if (tag == 18) {
         parse_auth_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_auth_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->auth_session().data(), this->auth_session().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "auth_session");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_auth_sysid;
        break;
      }

      // required int32 auth_sysid = 3;
      case 3: {
        if (tag == 24) {
         parse_auth_sysid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auth_sysid_)));
          set_has_auth_sysid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.caredear.AuthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.caredear.AuthRequest)
  return false;
#undef DO_
}

void AuthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.caredear.AuthRequest)
  // required string auth_token = 1;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_token().data(), this->auth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "auth_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->auth_token(), output);
  }

  // required string auth_session = 2;
  if (has_auth_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_session().data(), this->auth_session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "auth_session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->auth_session(), output);
  }

  // required int32 auth_sysid = 3;
  if (has_auth_sysid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->auth_sysid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.caredear.AuthRequest)
}

::google::protobuf::uint8* AuthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caredear.AuthRequest)
  // required string auth_token = 1;
  if (has_auth_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_token().data(), this->auth_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "auth_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->auth_token(), target);
  }

  // required string auth_session = 2;
  if (has_auth_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->auth_session().data(), this->auth_session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "auth_session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->auth_session(), target);
  }

  // required int32 auth_sysid = 3;
  if (has_auth_sysid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->auth_sysid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caredear.AuthRequest)
  return target;
}

int AuthRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string auth_token = 1;
    if (has_auth_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_token());
    }

    // required string auth_session = 2;
    if (has_auth_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->auth_session());
    }

    // required int32 auth_sysid = 3;
    if (has_auth_sysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auth_sysid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthRequest::MergeFrom(const AuthRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auth_token()) {
      set_auth_token(from.auth_token());
    }
    if (from.has_auth_session()) {
      set_auth_session(from.auth_session());
    }
    if (from.has_auth_sysid()) {
      set_auth_sysid(from.auth_sysid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthRequest::CopyFrom(const AuthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AuthRequest::Swap(AuthRequest* other) {
  if (other != this) {
    std::swap(auth_token_, other->auth_token_);
    std::swap(auth_session_, other->auth_session_);
    std::swap(auth_sysid_, other->auth_sysid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthRequest_descriptor_;
  metadata.reflection = AuthRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthResponse::kResultCodeFieldNumber;
const int AuthResponse::kExtraMsgFieldNumber;
#endif  // !_MSC_VER

AuthResponse::AuthResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.caredear.AuthResponse)
}

void AuthResponse::InitAsDefaultInstance() {
}

AuthResponse::AuthResponse(const AuthResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.caredear.AuthResponse)
}

void AuthResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 0;
  extra_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthResponse::~AuthResponse() {
  // @@protoc_insertion_point(destructor:com.caredear.AuthResponse)
  SharedDtor();
}

void AuthResponse::SharedDtor() {
  if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_msg_;
  }
  if (this != default_instance_) {
  }
}

void AuthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthResponse_descriptor_;
}

const AuthResponse& AuthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserAuth_2eproto();
  return *default_instance_;
}

AuthResponse* AuthResponse::default_instance_ = NULL;

AuthResponse* AuthResponse::New() const {
  return new AuthResponse;
}

void AuthResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_code_ = 0;
    if (has_extra_msg()) {
      if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extra_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.caredear.AuthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extra_msg;
        break;
      }

      // optional string extra_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_extra_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_msg().data(), this->extra_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extra_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.caredear.AuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.caredear.AuthResponse)
  return false;
#undef DO_
}

void AuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.caredear.AuthResponse)
  // required int32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_code(), output);
  }

  // optional string extra_msg = 2;
  if (has_extra_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_msg().data(), this->extra_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extra_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.caredear.AuthResponse)
}

::google::protobuf::uint8* AuthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caredear.AuthResponse)
  // required int32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_code(), target);
  }

  // optional string extra_msg = 2;
  if (has_extra_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_msg().data(), this->extra_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extra_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caredear.AuthResponse)
  return target;
}

int AuthResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_code());
    }

    // optional string extra_msg = 2;
    if (has_extra_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthResponse::MergeFrom(const AuthResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_extra_msg()) {
      set_extra_msg(from.extra_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthResponse::CopyFrom(const AuthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthResponse::Swap(AuthResponse* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(extra_msg_, other->extra_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthResponse_descriptor_;
  metadata.reflection = AuthResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

// @@protoc_insertion_point(global_scope)

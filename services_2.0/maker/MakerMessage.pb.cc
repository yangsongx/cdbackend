// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MakerMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MakerMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

namespace {

const ::google::protobuf::Descriptor* MakerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MakerReqType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MakerMessage_2eproto() {
  protobuf_AddDesc_MakerMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MakerMessage.proto");
  GOOGLE_CHECK(file != NULL);
  MakerRequest_descriptor_ = file->message_type(0);
  static const int MakerRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerRequest, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerRequest, req_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerRequest, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerRequest, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerRequest, makerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerRequest, md5_),
  };
  MakerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakerRequest_descriptor_,
      MakerRequest::default_instance_,
      MakerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakerRequest));
  MakerResponse_descriptor_ = file->message_type(1);
  static const int MakerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerResponse, extra_msg_),
  };
  MakerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakerResponse_descriptor_,
      MakerResponse::default_instance_,
      MakerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakerResponse));
  MakerReqType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MakerMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakerRequest_descriptor_, &MakerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakerResponse_descriptor_, &MakerResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MakerMessage_2eproto() {
  delete MakerRequest::default_instance_;
  delete MakerRequest_reflection_;
  delete MakerResponse::default_instance_;
  delete MakerResponse_reflection_;
}

void protobuf_AddDesc_MakerMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022MakerMessage.proto\022\014com.caredear\"\210\001\n\014M"
    "akerRequest\022\013\n\003cid\030\001 \002(\004\022,\n\010req_type\030\002 \002"
    "(\0162\032.com.caredear.MakerReqType\022\r\n\005model\030"
    "\003 \001(\t\022\020\n\010comments\030\004 \001(\t\022\017\n\007makerID\030\005 \001(\r"
    "\022\013\n\003md5\030\006 \001(\t\"7\n\rMakerResponse\022\023\n\013result"
    "_code\030\001 \002(\005\022\021\n\textra_msg\030\002 \001(\t*{\n\014MakerR"
    "eqType\022\017\n\013GET_UPTOKEN\020\000\022\021\n\rUPLOAD_FINISH"
    "\020\001\022\017\n\013GEN_PACKAGE\020\002\022\021\n\rBEGIN_PACKAGE\020\003\022\017"
    "\n\013GET_DOWNURL\020\004\022\022\n\016FINISH_DOWNURL\020\005", 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MakerMessage.proto", &protobuf_RegisterTypes);
  MakerRequest::default_instance_ = new MakerRequest();
  MakerResponse::default_instance_ = new MakerResponse();
  MakerRequest::default_instance_->InitAsDefaultInstance();
  MakerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MakerMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MakerMessage_2eproto {
  StaticDescriptorInitializer_MakerMessage_2eproto() {
    protobuf_AddDesc_MakerMessage_2eproto();
  }
} static_descriptor_initializer_MakerMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* MakerReqType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakerReqType_descriptor_;
}
bool MakerReqType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MakerRequest::kCidFieldNumber;
const int MakerRequest::kReqTypeFieldNumber;
const int MakerRequest::kModelFieldNumber;
const int MakerRequest::kCommentsFieldNumber;
const int MakerRequest::kMakerIDFieldNumber;
const int MakerRequest::kMd5FieldNumber;
#endif  // !_MSC_VER

MakerRequest::MakerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.caredear.MakerRequest)
}

void MakerRequest::InitAsDefaultInstance() {
}

MakerRequest::MakerRequest(const MakerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.caredear.MakerRequest)
}

void MakerRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  req_type_ = 0;
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  makerid_ = 0u;
  md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakerRequest::~MakerRequest() {
  // @@protoc_insertion_point(destructor:com.caredear.MakerRequest)
  SharedDtor();
}

void MakerRequest::SharedDtor() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (comments_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comments_;
  }
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (this != default_instance_) {
  }
}

void MakerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakerRequest_descriptor_;
}

const MakerRequest& MakerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MakerMessage_2eproto();
  return *default_instance_;
}

MakerRequest* MakerRequest::default_instance_ = NULL;

MakerRequest* MakerRequest::New() const {
  return new MakerRequest;
}

void MakerRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MakerRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(req_type_, makerid_);
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_comments()) {
      if (comments_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comments_->clear();
      }
    }
    if (has_md5()) {
      if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        md5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.caredear.MakerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_req_type;
        break;
      }

      // required .com.caredear.MakerReqType req_type = 2;
      case 2: {
        if (tag == 16) {
         parse_req_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::caredear::MakerReqType_IsValid(value)) {
            set_req_type(static_cast< ::com::caredear::MakerReqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (tag == 26) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_comments;
        break;
      }

      // optional string comments = 4;
      case 4: {
        if (tag == 34) {
         parse_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comments().data(), this->comments().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comments");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_makerID;
        break;
      }

      // optional uint32 makerID = 5;
      case 5: {
        if (tag == 40) {
         parse_makerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &makerid_)));
          set_has_makerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_md5;
        break;
      }

      // optional string md5 = 6;
      case 6: {
        if (tag == 50) {
         parse_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->md5().data(), this->md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "md5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.caredear.MakerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.caredear.MakerRequest)
  return false;
#undef DO_
}

void MakerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.caredear.MakerRequest)
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required .com.caredear.MakerReqType req_type = 2;
  if (has_req_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->req_type(), output);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  // optional string comments = 4;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comments");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->comments(), output);
  }

  // optional uint32 makerID = 5;
  if (has_makerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->makerid(), output);
  }

  // optional string md5 = 6;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->md5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.caredear.MakerRequest)
}

::google::protobuf::uint8* MakerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caredear.MakerRequest)
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required .com.caredear.MakerReqType req_type = 2;
  if (has_req_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->req_type(), target);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string comments = 4;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comments");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->comments(), target);
  }

  // optional uint32 makerID = 5;
  if (has_makerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->makerid(), target);
  }

  // optional string md5 = 6;
  if (has_md5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->md5().data(), this->md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "md5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->md5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caredear.MakerRequest)
  return target;
}

int MakerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required .com.caredear.MakerReqType req_type = 2;
    if (has_req_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->req_type());
    }

    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string comments = 4;
    if (has_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comments());
    }

    // optional uint32 makerID = 5;
    if (has_makerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->makerid());
    }

    // optional string md5 = 6;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->md5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakerRequest::MergeFrom(const MakerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_req_type()) {
      set_req_type(from.req_type());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_comments()) {
      set_comments(from.comments());
    }
    if (from.has_makerid()) {
      set_makerid(from.makerid());
    }
    if (from.has_md5()) {
      set_md5(from.md5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakerRequest::CopyFrom(const MakerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MakerRequest::Swap(MakerRequest* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(req_type_, other->req_type_);
    std::swap(model_, other->model_);
    std::swap(comments_, other->comments_);
    std::swap(makerid_, other->makerid_);
    std::swap(md5_, other->md5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakerRequest_descriptor_;
  metadata.reflection = MakerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakerResponse::kResultCodeFieldNumber;
const int MakerResponse::kExtraMsgFieldNumber;
#endif  // !_MSC_VER

MakerResponse::MakerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.caredear.MakerResponse)
}

void MakerResponse::InitAsDefaultInstance() {
}

MakerResponse::MakerResponse(const MakerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.caredear.MakerResponse)
}

void MakerResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_code_ = 0;
  extra_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakerResponse::~MakerResponse() {
  // @@protoc_insertion_point(destructor:com.caredear.MakerResponse)
  SharedDtor();
}

void MakerResponse::SharedDtor() {
  if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_msg_;
  }
  if (this != default_instance_) {
  }
}

void MakerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakerResponse_descriptor_;
}

const MakerResponse& MakerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MakerMessage_2eproto();
  return *default_instance_;
}

MakerResponse* MakerResponse::default_instance_ = NULL;

MakerResponse* MakerResponse::New() const {
  return new MakerResponse;
}

void MakerResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    result_code_ = 0;
    if (has_extra_msg()) {
      if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extra_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.caredear.MakerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_extra_msg;
        break;
      }

      // optional string extra_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_extra_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extra_msg().data(), this->extra_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extra_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.caredear.MakerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.caredear.MakerResponse)
  return false;
#undef DO_
}

void MakerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.caredear.MakerResponse)
  // required int32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_code(), output);
  }

  // optional string extra_msg = 2;
  if (has_extra_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_msg().data(), this->extra_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->extra_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.caredear.MakerResponse)
}

::google::protobuf::uint8* MakerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.caredear.MakerResponse)
  // required int32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_code(), target);
  }

  // optional string extra_msg = 2;
  if (has_extra_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extra_msg().data(), this->extra_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extra_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extra_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.caredear.MakerResponse)
  return target;
}

int MakerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_code());
    }

    // optional string extra_msg = 2;
    if (has_extra_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakerResponse::MergeFrom(const MakerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_extra_msg()) {
      set_extra_msg(from.extra_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakerResponse::CopyFrom(const MakerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MakerResponse::Swap(MakerResponse* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(extra_msg_, other->extra_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakerResponse_descriptor_;
  metadata.reflection = MakerResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

// @@protoc_insertion_point(global_scope)

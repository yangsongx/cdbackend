// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MakerMessage.proto

#ifndef PROTOBUF_MakerMessage_2eproto__INCLUDED
#define PROTOBUF_MakerMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MakerMessage_2eproto();
void protobuf_AssignDesc_MakerMessage_2eproto();
void protobuf_ShutdownFile_MakerMessage_2eproto();

class MakerRequest;
class MakerResponse;

enum MakerReqType {
  GET_UPTOKEN = 0,
  UPLOAD_FINISH = 1,
  GEN_PACKAGE = 2,
  BEGIN_PACKAGE = 3,
  GET_DOWNURL = 4,
  FINISH_DOWNURL = 5
};
bool MakerReqType_IsValid(int value);
const MakerReqType MakerReqType_MIN = GET_UPTOKEN;
const MakerReqType MakerReqType_MAX = FINISH_DOWNURL;
const int MakerReqType_ARRAYSIZE = MakerReqType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MakerReqType_descriptor();
inline const ::std::string& MakerReqType_Name(MakerReqType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MakerReqType_descriptor(), value);
}
inline bool MakerReqType_Parse(
    const ::std::string& name, MakerReqType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MakerReqType>(
    MakerReqType_descriptor(), name, value);
}
// ===================================================================

class MakerRequest : public ::google::protobuf::Message {
 public:
  MakerRequest();
  virtual ~MakerRequest();

  MakerRequest(const MakerRequest& from);

  inline MakerRequest& operator=(const MakerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MakerRequest& default_instance();

  void Swap(MakerRequest* other);

  // implements Message ----------------------------------------------

  MakerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MakerRequest& from);
  void MergeFrom(const MakerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required .com.caredear.MakerReqType req_type = 2;
  inline bool has_req_type() const;
  inline void clear_req_type();
  static const int kReqTypeFieldNumber = 2;
  inline ::com::caredear::MakerReqType req_type() const;
  inline void set_req_type(::com::caredear::MakerReqType value);

  // optional string model = 3;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string comments = 4;
  inline bool has_comments() const;
  inline void clear_comments();
  static const int kCommentsFieldNumber = 4;
  inline const ::std::string& comments() const;
  inline void set_comments(const ::std::string& value);
  inline void set_comments(const char* value);
  inline void set_comments(const char* value, size_t size);
  inline ::std::string* mutable_comments();
  inline ::std::string* release_comments();
  inline void set_allocated_comments(::std::string* comments);

  // optional uint32 makerID = 5;
  inline bool has_makerid() const;
  inline void clear_makerid();
  static const int kMakerIDFieldNumber = 5;
  inline ::google::protobuf::uint32 makerid() const;
  inline void set_makerid(::google::protobuf::uint32 value);

  // optional string md5 = 6;
  inline bool has_md5() const;
  inline void clear_md5();
  static const int kMd5FieldNumber = 6;
  inline const ::std::string& md5() const;
  inline void set_md5(const ::std::string& value);
  inline void set_md5(const char* value);
  inline void set_md5(const char* value, size_t size);
  inline ::std::string* mutable_md5();
  inline ::std::string* release_md5();
  inline void set_allocated_md5(::std::string* md5);

  // @@protoc_insertion_point(class_scope:com.caredear.MakerRequest)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_req_type();
  inline void clear_has_req_type();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_comments();
  inline void clear_has_comments();
  inline void set_has_makerid();
  inline void clear_has_makerid();
  inline void set_has_md5();
  inline void clear_has_md5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 cid_;
  ::std::string* model_;
  int req_type_;
  ::google::protobuf::uint32 makerid_;
  ::std::string* comments_;
  ::std::string* md5_;
  friend void  protobuf_AddDesc_MakerMessage_2eproto();
  friend void protobuf_AssignDesc_MakerMessage_2eproto();
  friend void protobuf_ShutdownFile_MakerMessage_2eproto();

  void InitAsDefaultInstance();
  static MakerRequest* default_instance_;
};
// -------------------------------------------------------------------

class MakerResponse : public ::google::protobuf::Message {
 public:
  MakerResponse();
  virtual ~MakerResponse();

  MakerResponse(const MakerResponse& from);

  inline MakerResponse& operator=(const MakerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MakerResponse& default_instance();

  void Swap(MakerResponse* other);

  // implements Message ----------------------------------------------

  MakerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MakerResponse& from);
  void MergeFrom(const MakerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 result_code() const;
  inline void set_result_code(::google::protobuf::int32 value);

  // optional string extra_msg = 2;
  inline bool has_extra_msg() const;
  inline void clear_extra_msg();
  static const int kExtraMsgFieldNumber = 2;
  inline const ::std::string& extra_msg() const;
  inline void set_extra_msg(const ::std::string& value);
  inline void set_extra_msg(const char* value);
  inline void set_extra_msg(const char* value, size_t size);
  inline ::std::string* mutable_extra_msg();
  inline ::std::string* release_extra_msg();
  inline void set_allocated_extra_msg(::std::string* extra_msg);

  // @@protoc_insertion_point(class_scope:com.caredear.MakerResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_extra_msg();
  inline void clear_has_extra_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* extra_msg_;
  ::google::protobuf::int32 result_code_;
  friend void  protobuf_AddDesc_MakerMessage_2eproto();
  friend void protobuf_AssignDesc_MakerMessage_2eproto();
  friend void protobuf_ShutdownFile_MakerMessage_2eproto();

  void InitAsDefaultInstance();
  static MakerResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MakerRequest

// required uint64 cid = 1;
inline bool MakerRequest::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MakerRequest::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MakerRequest::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MakerRequest::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 MakerRequest::cid() const {
  // @@protoc_insertion_point(field_get:com.caredear.MakerRequest.cid)
  return cid_;
}
inline void MakerRequest::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:com.caredear.MakerRequest.cid)
}

// required .com.caredear.MakerReqType req_type = 2;
inline bool MakerRequest::has_req_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MakerRequest::set_has_req_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MakerRequest::clear_has_req_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MakerRequest::clear_req_type() {
  req_type_ = 0;
  clear_has_req_type();
}
inline ::com::caredear::MakerReqType MakerRequest::req_type() const {
  // @@protoc_insertion_point(field_get:com.caredear.MakerRequest.req_type)
  return static_cast< ::com::caredear::MakerReqType >(req_type_);
}
inline void MakerRequest::set_req_type(::com::caredear::MakerReqType value) {
  assert(::com::caredear::MakerReqType_IsValid(value));
  set_has_req_type();
  req_type_ = value;
  // @@protoc_insertion_point(field_set:com.caredear.MakerRequest.req_type)
}

// optional string model = 3;
inline bool MakerRequest::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MakerRequest::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MakerRequest::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MakerRequest::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& MakerRequest::model() const {
  // @@protoc_insertion_point(field_get:com.caredear.MakerRequest.model)
  return *model_;
}
inline void MakerRequest::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.MakerRequest.model)
}
inline void MakerRequest::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.MakerRequest.model)
}
inline void MakerRequest::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.MakerRequest.model)
}
inline ::std::string* MakerRequest::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.MakerRequest.model)
  return model_;
}
inline ::std::string* MakerRequest::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MakerRequest::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.MakerRequest.model)
}

// optional string comments = 4;
inline bool MakerRequest::has_comments() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MakerRequest::set_has_comments() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MakerRequest::clear_has_comments() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MakerRequest::clear_comments() {
  if (comments_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comments_->clear();
  }
  clear_has_comments();
}
inline const ::std::string& MakerRequest::comments() const {
  // @@protoc_insertion_point(field_get:com.caredear.MakerRequest.comments)
  return *comments_;
}
inline void MakerRequest::set_comments(const ::std::string& value) {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comments_ = new ::std::string;
  }
  comments_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.MakerRequest.comments)
}
inline void MakerRequest::set_comments(const char* value) {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comments_ = new ::std::string;
  }
  comments_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.MakerRequest.comments)
}
inline void MakerRequest::set_comments(const char* value, size_t size) {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comments_ = new ::std::string;
  }
  comments_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.MakerRequest.comments)
}
inline ::std::string* MakerRequest::mutable_comments() {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    comments_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.MakerRequest.comments)
  return comments_;
}
inline ::std::string* MakerRequest::release_comments() {
  clear_has_comments();
  if (comments_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = comments_;
    comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MakerRequest::set_allocated_comments(::std::string* comments) {
  if (comments_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comments_;
  }
  if (comments) {
    set_has_comments();
    comments_ = comments;
  } else {
    clear_has_comments();
    comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.MakerRequest.comments)
}

// optional uint32 makerID = 5;
inline bool MakerRequest::has_makerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MakerRequest::set_has_makerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MakerRequest::clear_has_makerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MakerRequest::clear_makerid() {
  makerid_ = 0u;
  clear_has_makerid();
}
inline ::google::protobuf::uint32 MakerRequest::makerid() const {
  // @@protoc_insertion_point(field_get:com.caredear.MakerRequest.makerID)
  return makerid_;
}
inline void MakerRequest::set_makerid(::google::protobuf::uint32 value) {
  set_has_makerid();
  makerid_ = value;
  // @@protoc_insertion_point(field_set:com.caredear.MakerRequest.makerID)
}

// optional string md5 = 6;
inline bool MakerRequest::has_md5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MakerRequest::set_has_md5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MakerRequest::clear_has_md5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MakerRequest::clear_md5() {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_->clear();
  }
  clear_has_md5();
}
inline const ::std::string& MakerRequest::md5() const {
  // @@protoc_insertion_point(field_get:com.caredear.MakerRequest.md5)
  return *md5_;
}
inline void MakerRequest::set_md5(const ::std::string& value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.MakerRequest.md5)
}
inline void MakerRequest::set_md5(const char* value) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.MakerRequest.md5)
}
inline void MakerRequest::set_md5(const char* value, size_t size) {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  md5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.MakerRequest.md5)
}
inline ::std::string* MakerRequest::mutable_md5() {
  set_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    md5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.MakerRequest.md5)
  return md5_;
}
inline ::std::string* MakerRequest::release_md5() {
  clear_has_md5();
  if (md5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = md5_;
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MakerRequest::set_allocated_md5(::std::string* md5) {
  if (md5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete md5_;
  }
  if (md5) {
    set_has_md5();
    md5_ = md5;
  } else {
    clear_has_md5();
    md5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.MakerRequest.md5)
}

// -------------------------------------------------------------------

// MakerResponse

// required int32 result_code = 1;
inline bool MakerResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MakerResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MakerResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MakerResponse::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::google::protobuf::int32 MakerResponse::result_code() const {
  // @@protoc_insertion_point(field_get:com.caredear.MakerResponse.result_code)
  return result_code_;
}
inline void MakerResponse::set_result_code(::google::protobuf::int32 value) {
  set_has_result_code();
  result_code_ = value;
  // @@protoc_insertion_point(field_set:com.caredear.MakerResponse.result_code)
}

// optional string extra_msg = 2;
inline bool MakerResponse::has_extra_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MakerResponse::set_has_extra_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MakerResponse::clear_has_extra_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MakerResponse::clear_extra_msg() {
  if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_->clear();
  }
  clear_has_extra_msg();
}
inline const ::std::string& MakerResponse::extra_msg() const {
  // @@protoc_insertion_point(field_get:com.caredear.MakerResponse.extra_msg)
  return *extra_msg_;
}
inline void MakerResponse::set_extra_msg(const ::std::string& value) {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  extra_msg_->assign(value);
  // @@protoc_insertion_point(field_set:com.caredear.MakerResponse.extra_msg)
}
inline void MakerResponse::set_extra_msg(const char* value) {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  extra_msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.caredear.MakerResponse.extra_msg)
}
inline void MakerResponse::set_extra_msg(const char* value, size_t size) {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  extra_msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.caredear.MakerResponse.extra_msg)
}
inline ::std::string* MakerResponse::mutable_extra_msg() {
  set_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.caredear.MakerResponse.extra_msg)
  return extra_msg_;
}
inline ::std::string* MakerResponse::release_extra_msg() {
  clear_has_extra_msg();
  if (extra_msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extra_msg_;
    extra_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MakerResponse::set_allocated_extra_msg(::std::string* extra_msg) {
  if (extra_msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_msg_;
  }
  if (extra_msg) {
    set_has_extra_msg();
    extra_msg_ = extra_msg;
  } else {
    clear_has_extra_msg();
    extra_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.caredear.MakerResponse.extra_msg)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::caredear::MakerReqType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::caredear::MakerReqType>() {
  return ::com::caredear::MakerReqType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MakerMessage_2eproto__INCLUDED

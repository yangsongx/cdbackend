// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SipAccount.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SipAccount.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SipAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SipAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SipAccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SipAccountResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SipAccount_2eproto() {
  protobuf_AddDesc_SipAccount_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SipAccount.proto");
  GOOGLE_CHECK(file != NULL);
  SipAccountRequest_descriptor_ = file->message_type(0);
  static const int SipAccountRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAccountRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAccountRequest, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAccountRequest, sysid_),
  };
  SipAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SipAccountRequest_descriptor_,
      SipAccountRequest::default_instance_,
      SipAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SipAccountRequest));
  SipAccountResponse_descriptor_ = file->message_type(1);
  static const int SipAccountResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAccountResponse, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAccountResponse, user_credential_),
  };
  SipAccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SipAccountResponse_descriptor_,
      SipAccountResponse::default_instance_,
      SipAccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SipAccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SipAccountResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SipAccount_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SipAccountRequest_descriptor_, &SipAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SipAccountResponse_descriptor_, &SipAccountResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SipAccount_2eproto() {
  delete SipAccountRequest::default_instance_;
  delete SipAccountRequest_reflection_;
  delete SipAccountResponse::default_instance_;
  delete SipAccountResponse_reflection_;
}

void protobuf_AddDesc_SipAccount_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SipAccount.proto\"F\n\021SipAccountRequest\022"
    "\021\n\tuser_name\030\001 \002(\t\022\017\n\007session\030\002 \002(\t\022\r\n\005s"
    "ysid\030\003 \002(\005\";\n\022SipAccountResponse\022\014\n\004code"
    "\030\001 \002(\005\022\027\n\017user_credential\030\002 \001(\t", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SipAccount.proto", &protobuf_RegisterTypes);
  SipAccountRequest::default_instance_ = new SipAccountRequest();
  SipAccountResponse::default_instance_ = new SipAccountResponse();
  SipAccountRequest::default_instance_->InitAsDefaultInstance();
  SipAccountResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SipAccount_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SipAccount_2eproto {
  StaticDescriptorInitializer_SipAccount_2eproto() {
    protobuf_AddDesc_SipAccount_2eproto();
  }
} static_descriptor_initializer_SipAccount_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SipAccountRequest::kUserNameFieldNumber;
const int SipAccountRequest::kSessionFieldNumber;
const int SipAccountRequest::kSysidFieldNumber;
#endif  // !_MSC_VER

SipAccountRequest::SipAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SipAccountRequest)
}

void SipAccountRequest::InitAsDefaultInstance() {
}

SipAccountRequest::SipAccountRequest(const SipAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SipAccountRequest)
}

void SipAccountRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sysid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SipAccountRequest::~SipAccountRequest() {
  // @@protoc_insertion_point(destructor:SipAccountRequest)
  SharedDtor();
}

void SipAccountRequest::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_;
  }
  if (this != default_instance_) {
  }
}

void SipAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SipAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SipAccountRequest_descriptor_;
}

const SipAccountRequest& SipAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SipAccount_2eproto();
  return *default_instance_;
}

SipAccountRequest* SipAccountRequest::default_instance_ = NULL;

SipAccountRequest* SipAccountRequest::New() const {
  return new SipAccountRequest;
}

void SipAccountRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_session()) {
      if (session_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_->clear();
      }
    }
    sysid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SipAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SipAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }

      // required string session = 2;
      case 2: {
        if (tag == 18) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session().data(), this->session().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sysid;
        break;
      }

      // required int32 sysid = 3;
      case 3: {
        if (tag == 24) {
         parse_sysid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sysid_)));
          set_has_sysid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SipAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SipAccountRequest)
  return false;
#undef DO_
}

void SipAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SipAccountRequest)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_name(), output);
  }

  // required string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session(), output);
  }

  // required int32 sysid = 3;
  if (has_sysid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sysid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SipAccountRequest)
}

::google::protobuf::uint8* SipAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SipAccountRequest)
  // required string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }

  // required string session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session().data(), this->session().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session(), target);
  }

  // required int32 sysid = 3;
  if (has_sysid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sysid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SipAccountRequest)
  return target;
}

int SipAccountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // required string session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session());
    }

    // required int32 sysid = 3;
    if (has_sysid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sysid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SipAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SipAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SipAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SipAccountRequest::MergeFrom(const SipAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_sysid()) {
      set_sysid(from.sysid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SipAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SipAccountRequest::CopyFrom(const SipAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SipAccountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SipAccountRequest::Swap(SipAccountRequest* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(session_, other->session_);
    std::swap(sysid_, other->sysid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SipAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SipAccountRequest_descriptor_;
  metadata.reflection = SipAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SipAccountResponse::kCodeFieldNumber;
const int SipAccountResponse::kUserCredentialFieldNumber;
#endif  // !_MSC_VER

SipAccountResponse::SipAccountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SipAccountResponse)
}

void SipAccountResponse::InitAsDefaultInstance() {
}

SipAccountResponse::SipAccountResponse(const SipAccountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SipAccountResponse)
}

void SipAccountResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  user_credential_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SipAccountResponse::~SipAccountResponse() {
  // @@protoc_insertion_point(destructor:SipAccountResponse)
  SharedDtor();
}

void SipAccountResponse::SharedDtor() {
  if (user_credential_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_credential_;
  }
  if (this != default_instance_) {
  }
}

void SipAccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SipAccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SipAccountResponse_descriptor_;
}

const SipAccountResponse& SipAccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SipAccount_2eproto();
  return *default_instance_;
}

SipAccountResponse* SipAccountResponse::default_instance_ = NULL;

SipAccountResponse* SipAccountResponse::New() const {
  return new SipAccountResponse;
}

void SipAccountResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 0;
    if (has_user_credential()) {
      if (user_credential_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_credential_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SipAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SipAccountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_credential;
        break;
      }

      // optional string user_credential = 2;
      case 2: {
        if (tag == 18) {
         parse_user_credential:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_credential()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_credential().data(), this->user_credential().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_credential");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SipAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SipAccountResponse)
  return false;
#undef DO_
}

void SipAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SipAccountResponse)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string user_credential = 2;
  if (has_user_credential()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_credential().data(), this->user_credential().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_credential");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_credential(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SipAccountResponse)
}

::google::protobuf::uint8* SipAccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SipAccountResponse)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string user_credential = 2;
  if (has_user_credential()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_credential().data(), this->user_credential().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_credential");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_credential(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SipAccountResponse)
  return target;
}

int SipAccountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional string user_credential = 2;
    if (has_user_credential()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_credential());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SipAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SipAccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SipAccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SipAccountResponse::MergeFrom(const SipAccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_user_credential()) {
      set_user_credential(from.user_credential());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SipAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SipAccountResponse::CopyFrom(const SipAccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SipAccountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SipAccountResponse::Swap(SipAccountResponse* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(user_credential_, other->user_credential_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SipAccountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SipAccountResponse_descriptor_;
  metadata.reflection = SipAccountResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TokenMessage.proto

#ifndef PROTOBUF_TokenMessage_2eproto__INCLUDED
#define PROTOBUF_TokenMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TokenMessage_2eproto();
void protobuf_AssignDesc_TokenMessage_2eproto();
void protobuf_ShutdownFile_TokenMessage_2eproto();

class TokenRequest;
class TokenResponse;

// ===================================================================

class TokenRequest : public ::google::protobuf::Message {
 public:
  TokenRequest();
  virtual ~TokenRequest();

  TokenRequest(const TokenRequest& from);

  inline TokenRequest& operator=(const TokenRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TokenRequest& default_instance();

  void Swap(TokenRequest* other);

  // implements Message ----------------------------------------------

  TokenRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TokenRequest& from);
  void MergeFrom(const TokenRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // required string appid = 2;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 2;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // required string loging = 3;
  inline bool has_loging() const;
  inline void clear_loging();
  static const int kLogingFieldNumber = 3;
  inline const ::std::string& loging() const;
  inline void set_loging(const ::std::string& value);
  inline void set_loging(const char* value);
  inline void set_loging(const char* value, size_t size);
  inline ::std::string* mutable_loging();
  inline ::std::string* release_loging();
  inline void set_allocated_loging(::std::string* loging);

  // required string aes_string = 4;
  inline bool has_aes_string() const;
  inline void clear_aes_string();
  static const int kAesStringFieldNumber = 4;
  inline const ::std::string& aes_string() const;
  inline void set_aes_string(const ::std::string& value);
  inline void set_aes_string(const char* value);
  inline void set_aes_string(const char* value, size_t size);
  inline ::std::string* mutable_aes_string();
  inline ::std::string* release_aes_string();
  inline void set_allocated_aes_string(::std::string* aes_string);

  // @@protoc_insertion_point(class_scope:com.caredear.TokenRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_loging();
  inline void clear_has_loging();
  inline void set_has_aes_string();
  inline void clear_has_aes_string();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::std::string* appid_;
  ::std::string* loging_;
  ::std::string* aes_string_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_TokenMessage_2eproto();
  friend void protobuf_AssignDesc_TokenMessage_2eproto();
  friend void protobuf_ShutdownFile_TokenMessage_2eproto();

  void InitAsDefaultInstance();
  static TokenRequest* default_instance_;
};
// -------------------------------------------------------------------

class TokenResponse : public ::google::protobuf::Message {
 public:
  TokenResponse();
  virtual ~TokenResponse();

  TokenResponse(const TokenResponse& from);

  inline TokenResponse& operator=(const TokenResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TokenResponse& default_instance();

  void Swap(TokenResponse* other);

  // implements Message ----------------------------------------------

  TokenResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TokenResponse& from);
  void MergeFrom(const TokenResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result_code = 1;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 1;
  inline ::google::protobuf::int32 result_code() const;
  inline void set_result_code(::google::protobuf::int32 value);

  // optional string extra_code = 2;
  inline bool has_extra_code() const;
  inline void clear_extra_code();
  static const int kExtraCodeFieldNumber = 2;
  inline const ::std::string& extra_code() const;
  inline void set_extra_code(const ::std::string& value);
  inline void set_extra_code(const char* value);
  inline void set_extra_code(const char* value, size_t size);
  inline ::std::string* mutable_extra_code();
  inline ::std::string* release_extra_code();
  inline void set_allocated_extra_code(::std::string* extra_code);

  // @@protoc_insertion_point(class_scope:com.caredear.TokenResponse)
 private:
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_extra_code();
  inline void clear_has_extra_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* extra_code_;
  ::google::protobuf::int32 result_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_TokenMessage_2eproto();
  friend void protobuf_AssignDesc_TokenMessage_2eproto();
  friend void protobuf_ShutdownFile_TokenMessage_2eproto();

  void InitAsDefaultInstance();
  static TokenResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// TokenRequest

// required string uid = 1;
inline bool TokenRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TokenRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TokenRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TokenRequest::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& TokenRequest::uid() const {
  return *uid_;
}
inline void TokenRequest::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void TokenRequest::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void TokenRequest::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TokenRequest::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* TokenRequest::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TokenRequest::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string appid = 2;
inline bool TokenRequest::has_appid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TokenRequest::set_has_appid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TokenRequest::clear_has_appid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TokenRequest::clear_appid() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    appid_->clear();
  }
  clear_has_appid();
}
inline const ::std::string& TokenRequest::appid() const {
  return *appid_;
}
inline void TokenRequest::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void TokenRequest::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void TokenRequest::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TokenRequest::mutable_appid() {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  return appid_;
}
inline ::std::string* TokenRequest::release_appid() {
  clear_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TokenRequest::set_allocated_appid(::std::string* appid) {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string loging = 3;
inline bool TokenRequest::has_loging() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TokenRequest::set_has_loging() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TokenRequest::clear_has_loging() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TokenRequest::clear_loging() {
  if (loging_ != &::google::protobuf::internal::kEmptyString) {
    loging_->clear();
  }
  clear_has_loging();
}
inline const ::std::string& TokenRequest::loging() const {
  return *loging_;
}
inline void TokenRequest::set_loging(const ::std::string& value) {
  set_has_loging();
  if (loging_ == &::google::protobuf::internal::kEmptyString) {
    loging_ = new ::std::string;
  }
  loging_->assign(value);
}
inline void TokenRequest::set_loging(const char* value) {
  set_has_loging();
  if (loging_ == &::google::protobuf::internal::kEmptyString) {
    loging_ = new ::std::string;
  }
  loging_->assign(value);
}
inline void TokenRequest::set_loging(const char* value, size_t size) {
  set_has_loging();
  if (loging_ == &::google::protobuf::internal::kEmptyString) {
    loging_ = new ::std::string;
  }
  loging_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TokenRequest::mutable_loging() {
  set_has_loging();
  if (loging_ == &::google::protobuf::internal::kEmptyString) {
    loging_ = new ::std::string;
  }
  return loging_;
}
inline ::std::string* TokenRequest::release_loging() {
  clear_has_loging();
  if (loging_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = loging_;
    loging_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TokenRequest::set_allocated_loging(::std::string* loging) {
  if (loging_ != &::google::protobuf::internal::kEmptyString) {
    delete loging_;
  }
  if (loging) {
    set_has_loging();
    loging_ = loging;
  } else {
    clear_has_loging();
    loging_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string aes_string = 4;
inline bool TokenRequest::has_aes_string() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TokenRequest::set_has_aes_string() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TokenRequest::clear_has_aes_string() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TokenRequest::clear_aes_string() {
  if (aes_string_ != &::google::protobuf::internal::kEmptyString) {
    aes_string_->clear();
  }
  clear_has_aes_string();
}
inline const ::std::string& TokenRequest::aes_string() const {
  return *aes_string_;
}
inline void TokenRequest::set_aes_string(const ::std::string& value) {
  set_has_aes_string();
  if (aes_string_ == &::google::protobuf::internal::kEmptyString) {
    aes_string_ = new ::std::string;
  }
  aes_string_->assign(value);
}
inline void TokenRequest::set_aes_string(const char* value) {
  set_has_aes_string();
  if (aes_string_ == &::google::protobuf::internal::kEmptyString) {
    aes_string_ = new ::std::string;
  }
  aes_string_->assign(value);
}
inline void TokenRequest::set_aes_string(const char* value, size_t size) {
  set_has_aes_string();
  if (aes_string_ == &::google::protobuf::internal::kEmptyString) {
    aes_string_ = new ::std::string;
  }
  aes_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TokenRequest::mutable_aes_string() {
  set_has_aes_string();
  if (aes_string_ == &::google::protobuf::internal::kEmptyString) {
    aes_string_ = new ::std::string;
  }
  return aes_string_;
}
inline ::std::string* TokenRequest::release_aes_string() {
  clear_has_aes_string();
  if (aes_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aes_string_;
    aes_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TokenRequest::set_allocated_aes_string(::std::string* aes_string) {
  if (aes_string_ != &::google::protobuf::internal::kEmptyString) {
    delete aes_string_;
  }
  if (aes_string) {
    set_has_aes_string();
    aes_string_ = aes_string;
  } else {
    clear_has_aes_string();
    aes_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TokenResponse

// required int32 result_code = 1;
inline bool TokenResponse::has_result_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TokenResponse::set_has_result_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TokenResponse::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TokenResponse::clear_result_code() {
  result_code_ = 0;
  clear_has_result_code();
}
inline ::google::protobuf::int32 TokenResponse::result_code() const {
  return result_code_;
}
inline void TokenResponse::set_result_code(::google::protobuf::int32 value) {
  set_has_result_code();
  result_code_ = value;
}

// optional string extra_code = 2;
inline bool TokenResponse::has_extra_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TokenResponse::set_has_extra_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TokenResponse::clear_has_extra_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TokenResponse::clear_extra_code() {
  if (extra_code_ != &::google::protobuf::internal::kEmptyString) {
    extra_code_->clear();
  }
  clear_has_extra_code();
}
inline const ::std::string& TokenResponse::extra_code() const {
  return *extra_code_;
}
inline void TokenResponse::set_extra_code(const ::std::string& value) {
  set_has_extra_code();
  if (extra_code_ == &::google::protobuf::internal::kEmptyString) {
    extra_code_ = new ::std::string;
  }
  extra_code_->assign(value);
}
inline void TokenResponse::set_extra_code(const char* value) {
  set_has_extra_code();
  if (extra_code_ == &::google::protobuf::internal::kEmptyString) {
    extra_code_ = new ::std::string;
  }
  extra_code_->assign(value);
}
inline void TokenResponse::set_extra_code(const char* value, size_t size) {
  set_has_extra_code();
  if (extra_code_ == &::google::protobuf::internal::kEmptyString) {
    extra_code_ = new ::std::string;
  }
  extra_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TokenResponse::mutable_extra_code() {
  set_has_extra_code();
  if (extra_code_ == &::google::protobuf::internal::kEmptyString) {
    extra_code_ = new ::std::string;
  }
  return extra_code_;
}
inline ::std::string* TokenResponse::release_extra_code() {
  clear_has_extra_code();
  if (extra_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = extra_code_;
    extra_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TokenResponse::set_allocated_extra_code(::std::string* extra_code) {
  if (extra_code_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_code_;
  }
  if (extra_code) {
    set_has_extra_code();
    extra_code_ = extra_code;
  } else {
    clear_has_extra_code();
    extra_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TokenMessage_2eproto__INCLUDED

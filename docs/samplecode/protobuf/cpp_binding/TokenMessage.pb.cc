// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TokenMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TokenMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace caredear {

namespace {

const ::google::protobuf::Descriptor* TokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TokenResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TokenResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TokenMessage_2eproto() {
  protobuf_AddDesc_TokenMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TokenMessage.proto");
  GOOGLE_CHECK(file != NULL);
  TokenRequest_descriptor_ = file->message_type(0);
  static const int TokenRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenRequest, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenRequest, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenRequest, loging_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenRequest, aes_string_),
  };
  TokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenRequest_descriptor_,
      TokenRequest::default_instance_,
      TokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenRequest));
  TokenResponse_descriptor_ = file->message_type(1);
  static const int TokenResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenResponse, result_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenResponse, extra_code_),
  };
  TokenResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TokenResponse_descriptor_,
      TokenResponse::default_instance_,
      TokenResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TokenResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TokenResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TokenMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenRequest_descriptor_, &TokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TokenResponse_descriptor_, &TokenResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TokenMessage_2eproto() {
  delete TokenRequest::default_instance_;
  delete TokenRequest_reflection_;
  delete TokenResponse::default_instance_;
  delete TokenResponse_reflection_;
}

void protobuf_AddDesc_TokenMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022TokenMessage.proto\022\014com.caredear\"N\n\014To"
    "kenRequest\022\013\n\003uid\030\001 \002(\t\022\r\n\005appid\030\002 \002(\t\022\016"
    "\n\006loging\030\003 \002(\t\022\022\n\naes_string\030\004 \002(\t\"8\n\rTo"
    "kenResponse\022\023\n\013result_code\030\001 \002(\005\022\022\n\nextr"
    "a_code\030\002 \001(\t", 172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TokenMessage.proto", &protobuf_RegisterTypes);
  TokenRequest::default_instance_ = new TokenRequest();
  TokenResponse::default_instance_ = new TokenResponse();
  TokenRequest::default_instance_->InitAsDefaultInstance();
  TokenResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TokenMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TokenMessage_2eproto {
  StaticDescriptorInitializer_TokenMessage_2eproto() {
    protobuf_AddDesc_TokenMessage_2eproto();
  }
} static_descriptor_initializer_TokenMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TokenRequest::kUidFieldNumber;
const int TokenRequest::kAppidFieldNumber;
const int TokenRequest::kLogingFieldNumber;
const int TokenRequest::kAesStringFieldNumber;
#endif  // !_MSC_VER

TokenRequest::TokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TokenRequest::InitAsDefaultInstance() {
}

TokenRequest::TokenRequest(const TokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TokenRequest::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loging_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aes_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenRequest::~TokenRequest() {
  SharedDtor();
}

void TokenRequest::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (loging_ != &::google::protobuf::internal::kEmptyString) {
    delete loging_;
  }
  if (aes_string_ != &::google::protobuf::internal::kEmptyString) {
    delete aes_string_;
  }
  if (this != default_instance_) {
  }
}

void TokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenRequest_descriptor_;
}

const TokenRequest& TokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TokenMessage_2eproto();
  return *default_instance_;
}

TokenRequest* TokenRequest::default_instance_ = NULL;

TokenRequest* TokenRequest::New() const {
  return new TokenRequest;
}

void TokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    if (has_loging()) {
      if (loging_ != &::google::protobuf::internal::kEmptyString) {
        loging_->clear();
      }
    }
    if (has_aes_string()) {
      if (aes_string_ != &::google::protobuf::internal::kEmptyString) {
        aes_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_appid;
        break;
      }

      // required string appid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_loging;
        break;
      }

      // required string loging = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loging:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loging()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loging().data(), this->loging().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_aes_string;
        break;
      }

      // required string aes_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aes_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aes_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aes_string().data(), this->aes_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }

  // required string appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->appid(), output);
  }

  // required string loging = 3;
  if (has_loging()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loging().data(), this->loging().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->loging(), output);
  }

  // required string aes_string = 4;
  if (has_aes_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aes_string().data(), this->aes_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->aes_string(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }

  // required string appid = 2;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->appid(), target);
  }

  // required string loging = 3;
  if (has_loging()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loging().data(), this->loging().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->loging(), target);
  }

  // required string aes_string = 4;
  if (has_aes_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aes_string().data(), this->aes_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->aes_string(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }

    // required string appid = 2;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // required string loging = 3;
    if (has_loging()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loging());
    }

    // required string aes_string = 4;
    if (has_aes_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aes_string());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenRequest::MergeFrom(const TokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_loging()) {
      set_loging(from.loging());
    }
    if (from.has_aes_string()) {
      set_aes_string(from.aes_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenRequest::CopyFrom(const TokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TokenRequest::Swap(TokenRequest* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(appid_, other->appid_);
    std::swap(loging_, other->loging_);
    std::swap(aes_string_, other->aes_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenRequest_descriptor_;
  metadata.reflection = TokenRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TokenResponse::kResultCodeFieldNumber;
const int TokenResponse::kExtraCodeFieldNumber;
#endif  // !_MSC_VER

TokenResponse::TokenResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TokenResponse::InitAsDefaultInstance() {
}

TokenResponse::TokenResponse(const TokenResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TokenResponse::SharedCtor() {
  _cached_size_ = 0;
  result_code_ = 0;
  extra_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TokenResponse::~TokenResponse() {
  SharedDtor();
}

void TokenResponse::SharedDtor() {
  if (extra_code_ != &::google::protobuf::internal::kEmptyString) {
    delete extra_code_;
  }
  if (this != default_instance_) {
  }
}

void TokenResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TokenResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TokenResponse_descriptor_;
}

const TokenResponse& TokenResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TokenMessage_2eproto();
  return *default_instance_;
}

TokenResponse* TokenResponse::default_instance_ = NULL;

TokenResponse* TokenResponse::New() const {
  return new TokenResponse;
}

void TokenResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_code_ = 0;
    if (has_extra_code()) {
      if (extra_code_ != &::google::protobuf::internal::kEmptyString) {
        extra_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TokenResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_code_)));
          set_has_result_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extra_code;
        break;
      }

      // optional string extra_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extra_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extra_code().data(), this->extra_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TokenResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_code = 1;
  if (has_result_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_code(), output);
  }

  // optional string extra_code = 2;
  if (has_extra_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extra_code().data(), this->extra_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->extra_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TokenResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_code = 1;
  if (has_result_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_code(), target);
  }

  // optional string extra_code = 2;
  if (has_extra_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extra_code().data(), this->extra_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->extra_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TokenResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_code = 1;
    if (has_result_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_code());
    }

    // optional string extra_code = 2;
    if (has_extra_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extra_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TokenResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TokenResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TokenResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TokenResponse::MergeFrom(const TokenResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_code()) {
      set_result_code(from.result_code());
    }
    if (from.has_extra_code()) {
      set_extra_code(from.extra_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TokenResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TokenResponse::CopyFrom(const TokenResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TokenResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TokenResponse::Swap(TokenResponse* other) {
  if (other != this) {
    std::swap(result_code_, other->result_code_);
    std::swap(extra_code_, other->extra_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TokenResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TokenResponse_descriptor_;
  metadata.reflection = TokenResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caredear
}  // namespace com

// @@protoc_insertion_point(global_scope)
